pchisq(q= 31.41043, df = 20)
pchisq(q= 11.218, df = 20)
qgamma(p = 0.05, shape = 8,rate = 1/3)
qchisq(0.05,20)
10.85081 /2.8
8*3.875289
pchisq(q= 31.00231, df = 20)
4*3.875289
pchisq(q= 15.50116, df = 20)
ln(1.3)
pchisq(q= 11.2, df = 20)
pchisq(q=15.21,df=15)
1- pchisq(q=15.21,df=15)
1- pchisq(q=35.41,df=24)
pchisq(q=35.41,df=24)
1- pchisq(q=36.41,df=24)
pchisq(q=36.41,df=24)
pbinom(q=14,size = 20, prob = 0.60)
pbinom(q=15,size = 20, prob = 0.60)
pbinom(q=15,size = 20, prob = 0.70)
1-dpois(20,12)
1-dpois(19,12)
1-dpois(20,16)
ppois(q = 20,16)
1-ppois(q = 20,16)
1-ppois(q = 7,lambda =6)
1-ppois(q = 9,lambda =4)
ppois(q = 9,lambda =4)
1-ppois(q = 9,lambda =4)
1-ppois(q = 8,lambda =4)
qchisq(15.78,14)
pchisq(15.78,14)
1- pchisq(15.78,14)
1- pchisq(24,14)
1- pchisq(16,14)
pchisq(31,20)
1-pchisq(q=15.78,df=14)
1-pchisq(q=6,df=14)
1-pchisq(q=24,df=14)
1-pchisq(q=16,df=14)
1-pchisq(q=26,df=14)
pchisq(8.5368,15)
1-pchisq(8.5368,15)
sample(1,3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(1,1:3)
sample(2,1:3)
sample(1:3)
sample(1,1:3)
sample(2,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
sample(3,1:3)
library (shiny)
> runExample("01_hello")
>runExample("01_hello")
runExample("01_hello")
runApp('C:/Users/Gustavo Reyes/Box/Stasiewicz Lab/Gustavo Reyes/MockShinyApp')
runApp('C:/Users/Gustavo Reyes/Box/Stasiewicz Lab/Gustavo Reyes/MockShinyApp')
runApp('C:/Users/Gustavo Reyes/Box/Stasiewicz Lab/Gustavo Reyes/MockShinyApp')
install.packages("tidytuesdayR")
library(GGally)
library(ggplot2)
library(tidyverse)
#Loading the dataset
Dataset1<-read.csv("Draft_Dataset_Weights_CSV.csv")
#Correlation coefficients and simple plots
Data_Correlation<-cor(Dataset1$Change_Weight_Period,Dataset1$Protein_Density,use="complete.obs")
cor(Dataset1$ProteinG,Dataset1$Protein_Density,use="complete.obs")
plot(Dataset1$Change_Weight_Period,Dataset1$Protein_Density)
plot(Dataset1$Change_Weight_Period,Dataset1$Fiber_Density)
#Linear Model to Predict change in Weight based on Fiber Density
Linear_Mod_Protein<-lm(formula = Dataset1$Change_Weight_Period~Dataset1$Protein_Density)
summary(Linear_Mod_Protein)
#base R plot
plot(y= Dataset1$Change_Weight_Period, x = Dataset1$Protein_Density)
abline(a  = Linear_Mod_Protein$coefficients[1],b  = Linear_Mod_Protein$coefficients[2], col = "red")
#ggplot, make it look prety
ggplot(Dataset1, aes(x = Protein_Density, y = Change_Weight_Period)) +
geom_point() +
stat_smooth(method = "lm", col = "red")+
labs(title = paste("Adj R2 = ",signif(summary(Linear_Mod_Protein)$adj.r.squared, 5),
"Intercept =",signif(Linear_Mod_Protein$coef[[1]],5 ),
" Slope =",signif(Linear_Mod_Protein$coef[[2]], 5),
" P =",signif(summary(Linear_Mod_Protein)$coef[2,4], 5)))+
ylab("Change in Weight [lb]")+
xlab("Protein Density")
head(Dataset1)
SurveyData<-read.csv("LogisticReg.csv")
head(SurveyData)
SurveyData<-SurveyData %>%
mutate(W_Change_12 =Weight_12-Initial_Weight, W_Change_Final =  Final_Weight-Initial_Weight, Protein_Green = NA, Fiber_Green =NA)
SurveyData<-func_green(df = SurveyData,
colno = 9, #column where protein density
treshold = 7, #7 g per clcal
newcol = 13) #New column
library(GGally)
library(ggplot2)
library(tidyverse)
#Loading the dataset
Dataset1<-read.csv("Draft_Dataset_Weights_CSV.csv")
#Correlation coefficients and simple plots
Data_Correlation<-cor(Dataset1$Change_Weight_Period,Dataset1$Protein_Density,use="complete.obs")
cor(Dataset1$ProteinG,Dataset1$Protein_Density,use="complete.obs")
plot(Dataset1$Change_Weight_Period,Dataset1$Protein_Density)
plot(Dataset1$Change_Weight_Period,Dataset1$Fiber_Density)
#Linear Model to Predict change in Weight based on Fiber Density
Linear_Mod_Protein<-lm(formula = Dataset1$Change_Weight_Period~Dataset1$Protein_Density)
summary(Linear_Mod_Protein)
#base R plot
plot(y= Dataset1$Change_Weight_Period, x = Dataset1$Protein_Density)
abline(a  = Linear_Mod_Protein$coefficients[1],b  = Linear_Mod_Protein$coefficients[2], col = "red")
#ggplot, make it look prety
ggplot(Dataset1, aes(x = Protein_Density, y = Change_Weight_Period)) +
geom_point() +
stat_smooth(method = "lm", col = "red")+
labs(title = paste("Adj R2 = ",signif(summary(Linear_Mod_Protein)$adj.r.squared, 5),
"Intercept =",signif(Linear_Mod_Protein$coef[[1]],5 ),
" Slope =",signif(Linear_Mod_Protein$coef[[2]], 5),
" P =",signif(summary(Linear_Mod_Protein)$coef[2,4], 5)))+
ylab("Change in Weight [lb]")+
xlab("Protein Density")
#Linear model for multiple predictors
Linear_Mod_PD_Cal<-lm(formula = Dataset1$Change_Weight_Period~Dataset1$Protein_Density+Dataset1$Kcal)
summary(Linear_Mod_PD_Cal)
#Linear model for multiple predictors
Linear_Mod_PD_Cal<-lm(formula = Dataset1$Change_Weight_Period~Dataset1$Protein_Density+Dataset1$Kcal)
summary(Linear_Mod_PD_Cal)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Pair data to see correlation between weight loss and other predictors.
Clean_data_Pairs <-Dataset1[,c(5:10)]
cor(Clean_data_Pairs, use = "complete.obs")
pairs(Clean_data_Pairs)
ggpairs(Clean_data_Pairs)
#Logistic Regression Model:
#Tidy Data for Logistic Regression
Clean_data_Pairs<- Clean_data_Pairs %>%
mutate(Green_Protein = 0) %>%
mutate(Green_Fiber = 0) %>%
mutate(Weighloss_YN= 0)
#Function to change booleans for logistic regression
func_green<-function(df, colno, treshold, newcol){
for (i in 1:nrow(df)){
Response<-df[i,colno]
if (is.na(Response)){
df[i,newcol]<-NA
}else if (Response<treshold){
df[i,newcol]<- 0
} else if (Response>=treshold){
df[i,newcol]<- 1
}
}
return(df)
}
func_WL<-function(df, colno, treshold, newcol){
for (i in 1:nrow(df)){
Response<-df[i,colno]
if (is.na(Response)){
df[i,newcol]<-NA
}else if (Response>=treshold){
df[i,newcol]<- 0
} else if (Response<treshold){
df[i,newcol]<- 1
}
}
return(df)
}
Clean_data_Pairs<-func_green(df = Clean_data_Pairs,
colno = 5, #column where protein density
treshold = 7, #7 g per clcal
newcol = 7) #New column
Clean_data_Pairs<-func_green(df = Clean_data_Pairs,
colno = 6, #column where protein density
treshold = 1.8, #7 g per clcal
newcol = 8) #New column
Clean_data_Pairs<-func_WL(df = Clean_data_Pairs,
colno = 1, #column where protein density
treshold = 0, #7 g per clcal
newcol = 9) #New column
#Logisitic Regression for Weighloss yes or not.
gl <- glm(Weighloss_YN~Protein_Density  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl)
summary(gl)
SurveyData<-read.csv("LogisticReg.csv")
head(SurveyData)
SurveyData<-SurveyData %>%
mutate(W_Change_12 =Weight_12-Initial_Weight, W_Change_Final =  Final_Weight-Initial_Weight, Protein_Green = NA, Fiber_Green =NA)
SurveyData<-func_green(df = SurveyData,
colno = 9, #column where protein density
treshold = 7, #7 g per clcal
newcol = 13) #New column
SurveyData<-func_green(df = SurveyData,
colno = 10,#column where protein density
treshold = 1.8, #7 g per clcal
newcol = 14) #New column
xtabs(~Protein_Green+Protein_12mon, data= SurveyData)
#Cross tabulation
SurveyData %>%
ggplot(aes(x = factor(Protein_12mon))) +
geom_bar() +
facet_wrap(~Protein_Green)
xtabs(~Fiber_Green+Fiber_12mon, data= SurveyData)
#Cross Tabulation.
SurveyData %>%
ggplot(aes(x = factor(Fiber_12mon))) +
geom_bar() +
facet_wrap(~Fiber_Green)
SurveyData$Fiber_12mon<-as.factor(SurveyData$Fiber_12mon)
SurveyData$Protein_12mon<-as.factor(SurveyData$Protein_12mon)
glP <- glm(Protein_Green~Protein_12mon, family = binomial(link="logit"), data=SurveyData)
AIC(glP)
summary(glP)
#every unit increase in predictor will increase the log odds of being green by 17.18
exp(glP$coefficients)
#The interpretation of rank is different from others, going to rank-2 college from rank-1 college will decrease the log odds of getting admit by -0.67. Going from rank-2 to rank-3 will decrease it by -1.340.
install.packages("pwr")
library(GGally)
library(ggplot2)
library(tidyverse)
library(pwr)
install.packages(WebPower)
install.packages("WebPower")
library(WebPower)
#Based on correlation between change in weight and protein Density:
wp.correlation(n=17, r=-.324)
#Based on correlation between change in weight and protein Density:
wp.correlation(n=17, r=-.324)
Power_size = wp.correlation(n=seq(50,100,10),r=-.324, alternative = "two.sided")
plot(Power_size,type='b')
#Based on correlation between change in weight and protein Density:
wp.correlation(n=17, r=-.324)
Power_size = wp.correlation(n=seq(50,100,10),r=-.324, alternative = "two.sided")
summary(Power_size)
plot(Power_size,type='b')
#Based on correlation between change in weight and protein Density:
wp.correlation(n=17, r=-.324)
Power_size = wp.correlation(n=seq(50,100,10),r=-.324, alternative = "two.sided")
Power_size
plot(Power_size,type='b')
#Logistic Regression Model:
#Tidy Data for Logistic Regression
Clean_data_Pairs<- Clean_data_Pairs %>%
mutate(Green_Protein = 0) %>%
mutate(Green_Fiber = 0) %>%
mutate(Weighloss_YN= 0)
#Function to change booleans for logistic regression
func_green<-function(df, colno, treshold, newcol){
for (i in 1:nrow(df)){
Response<-df[i,colno]
if (is.na(Response)){
df[i,newcol]<-NA
}else if (Response<treshold){
df[i,newcol]<- 0
} else if (Response>=treshold){
df[i,newcol]<- 1
}
}
return(df)
}
func_WL<-function(df, colno, treshold, newcol){
for (i in 1:nrow(df)){
Response<-df[i,colno]
if (is.na(Response)){
df[i,newcol]<-NA
}else if (Response>=treshold){
df[i,newcol]<- 0
} else if (Response<treshold){
df[i,newcol]<- 1
}
}
return(df)
}
Clean_data_Pairs<-func_green(df = Clean_data_Pairs,
colno = 5, #column where protein density
treshold = 7, #7 g per clcal
newcol = 7) #New column
Clean_data_Pairs<-func_green(df = Clean_data_Pairs,
colno = 6, #column where protein density
treshold = 1.8, #7 g per clcal
newcol = 8) #New column
Clean_data_Pairs<-func_WL(df = Clean_data_Pairs,
colno = 1, #column where protein density
treshold = 0, #7 g per clcal
newcol = 9) #New column
#Logisitic Regression for Weighloss yes or not.
gl <- glm(Weighloss_YN~Protein_Density  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl)
summary(gl)
View(Clean_data_Pairs)
gl_FP<-glm(Weighloss_YN~Protein_Density+Fiber_Density  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl_FP)
summary(gl_FP)
View(Clean_data_Pairs)
gl_FPK<-glm(Weighloss_YN~Protein_Density+Fiber_Density+Kcal  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl_FPK)
summary(gl_FPK)
gl_K<-glm(Weighloss_YN~Kcal  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl_K)
summary(gl_K)
exp(coef(gl_k))
exp(coef(gl_K))
gl_K<-glm(Weighloss_YN~Kcal  , family = binomial(link="logit"), data=Clean_data_Pairs)
AIC(gl_K)
summary(gl_K)
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
library(scales)
library(forcats)
AnalysysDF %>%
count(Location) %>%
arrange(desc(n)) %>%
mutate(Location = fct_reorder(Location, n)) %>%
ggplot(aes(x =Location, y = n/sum(n)*100))+
scale_y_continuous(labels = scales::percent_format(scale = 1) )+
geom_col()+
labs(x = "Final Food Location", y = "Percent of milk items by location", title= "Final Location for milk-Donation happens end of week")+
theme(plot.title = element_text(hjust = 0.5))+
coord_flip()
AnalysysDF %>%
ggplot(aes(x = TotTime))+
geom_histogram()+
scale_x_continuous(n.breaks= 10)+
labs(x = "Time in Hours", y = "Count ", title= "Time in system by Item week")+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
ggplot(aes(x = SpoilageCon))+
geom_histogram(color="darkblue", fill="lightblue")+
geom_vline(xintercept =7, color= "Red")+
scale_x_continuous(n.breaks= 10)+
labs(x = "Phsychotroph Population Log CFU/ml", y = "Count", title= "Levels per milk carton")+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
ggplot(aes(y = SpoilageCon, x= TotTime, color = ConsumedAt))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location, scales = "free_x")+
labs(x = "Time in System", y = "Phsychotroph Population Log CFU/ml", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous()+
scale_x_log10(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
mutate(Change_Cont = SpoilageCon-InSpoilageCon) %>%
ggplot(aes(y = Change_Cont, x= TotTime, color = ConsumedAt))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location, scales = "free_x")+
labs(x = "Time in System", y = "Change Phsychotroph Population Log CFU/ml", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous()+
scale_x_log10(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
#Validation of their model, obtaining similar Histograms as theirs for spoilage
shelf_life<-c()
for (i in 1:1000){
Temp<-rnorm(1,4.4,2)
Growth_variability <- 1-(rnorm(1,0,17)/100)
Initial_pop <- rtriang(1,0,1,4)
GrowthNeedforspoilage<-7-Initial_pop
Tmin <- -1.19
bval <-0.03578
growthRate <- ((Temp-Tmin)*bval)^2
Adjusted_GrowthRate<-growthRate+Growth_variability
LogGrowthRate<-Adjusted_GrowthRate*log10(2)
Shelflifedays<-(GrowthNeedforspoilage/LogGrowthRate)
shelf_life<-c(shelf_life,Shelflifedays)
}
hist(shelf_life,breaks = 100)
abline(v=14, col = "red")
mean(shelf_life)
#Validation of their model, obtaining similar Histograms as theirs for spoilage
shelf_life<-c()
for (i in 1:1000){
Temp<-25
Growth_variability <- 1-(rnorm(1,0,17)/100)
Initial_pop <- rtriang(1,0,1,4)
GrowthNeedforspoilage<-7-Initial_pop
Tmin <- -1.19
bval <-0.03578
growthRate <- ((Temp-Tmin)*bval)^2
Adjusted_GrowthRate<-growthRate+Growth_variability
LogGrowthRate<-Adjusted_GrowthRate*log10(2)
Shelflifedays<-(GrowthNeedforspoilage/LogGrowthRate)
shelf_life<-c(shelf_life,Shelflifedays)
}
hist(shelf_life,breaks = 100)
abline(v=14, col = "red")
mean(shelf_life)
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
AnalysysDF %>%
ggplot(aes(x = TotTime))+
geom_histogram()+
scale_x_continuous(n.breaks= 10)+
labs(x = "Time in Hours", y = "Count ", title= "Time in system by Item week")+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
ggplot(aes(x = SpoilageCon))+
geom_histogram(color="darkblue", fill="lightblue")+
geom_vline(xintercept =7, color= "Red")+
scale_x_continuous(n.breaks= 10)+
labs(x = "Phsychotroph Population Log CFU/ml", y = "Count", title= "Levels per milk carton")+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
ggplot(aes(y = SpoilageCon, x= TotTime, color = ConsumedAt))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location, scales = "free_x")+
labs(x = "Time in System", y = "Phsychotroph Population Log CFU/ml", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous()+
scale_x_log10(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
mutate(Change_Cont = SpoilageCon-InSpoilageCon) %>%
ggplot(aes(y = Change_Cont, x= TotTime, color = ConsumedAt))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location, scales = "free_x")+
labs(x = "Time in System", y = "Change Phsychotroph Population Log CFU/ml", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous()+
scale_x_log10(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
