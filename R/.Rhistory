source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_vline(xintercept =7, color= "Red")+
facet_wrap(.~Location,)+
labs(y = "Time in System", x = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(xintercept =7, color= "Red")+
facet_wrap(.~Location,)+
labs(y = "Time in System", x = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location,)+
labs(y = "Time in System", x = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location,)+
labs(x = "Time in System", y = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location)+
labs(x = "Time in System", y = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location)+
labs(x = "Time in System", y = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location)+
labs(x = "Time in System", y = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
scale_x_log10()
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location)+
labs(x = "Time in System", y = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))+
scale_x_log10()
Pre_Data %>%
ggplot(aes(y = SpoilageCon, x= TotTime))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location)+
labs(x = "Time in System", y = "Log Psychotroph Population ", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous(n.breaks= 10)+
scale_x_continuous(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt2(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt2(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
Func_Adding_Initial_MilkCOnt3<-function(df){
#df$SpoilageCon<-rtri(nrow(df),min=0,mode=1,max=4)
vector<-df$SpoilageCon
for (i in vector){
Levels<-rtri(1,min=0,mode=1,max=4)
vector[i]<-Levels
}
df$SpoilageCon<-vector
}
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt2(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
Pre_Data.Frame$SpoilageCon<-0
Func_Adding_Initial_MilkCOnt3<-function(df){
#df$SpoilageCon<-rtri(nrow(df),min=0,mode=1,max=4)
vector<-df$SpoilageCon
apply(X = vector,FUN =sysfunc )
df$SpoilageCon<-vector
}
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
sysfunc<-function(x){
Levels<-rtri(1,min=0,mode=1,max=4)
vector[x]<-Levels
}
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
sysfunc<-function(X){
Levels<-rtri(1,min=0,mode=1,max=4)
vector[x]<-Levels
}
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
sysfunc<-function(X){
Levels<-rtri(1,min=0,mode=1,max=4)
vector[x]<-Levels
}
Func_Adding_Initial_MilkCOnt3<-function(df){
#df$SpoilageCon<-rtri(nrow(df),min=0,mode=1,max=4)
vector<-df$SpoilageCon
vector<-lapply(X = vector,FUN =sysfunc )
df$SpoilageCon<-vector
}
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
sysfunc<-function(x){
Levels<-rtri(1,min=0,mode=1,max=4)
x<-Levels
}
sysfunc<-function(x){
Levels<-rtri(1,min=0,mode=1,max=4)
x<-Levels
}
Func_Adding_Initial_MilkCOnt3<-function(df){
#df$SpoilageCon<-rtri(nrow(df),min=0,mode=1,max=4)
vector<-df$SpoilageCon
vector<-sapply(X = vector,FUN =sysfunc )
df$SpoilageCon<-vector
}
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
View(Pre_Data.Frame)
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
Pre_Data.Frame$SpoilageCon<-0
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
View(Pre_Data.Frame)
Func_Adding_Initial_MilkCOnt3<-function(df){
#df$SpoilageCon<-rtri(nrow(df),min=0,mode=1,max=4)
vector<-df$SpoilageCon
vector<-sapply(X = vector,FUN =sysfunc )
df$SpoilageCon<-vector
return(df)
}
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
View(Pre_Data.Frame)
Pre_Data.Frame$SpoilageCon<-0
startTime <- Sys.time()
Func_Adding_Initial_MilkCOnt2(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
View(Pre_Data.Frame)
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt2(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
View(Pre_Data.Frame)
Func_Adding_Initial_MilkCOnt2<-function(df){
#df$SpoilageCon<-rtri(nrow(df),min=0,mode=1,max=4)
for (i in 1:nrow(df)){
Levels<-rtri(1,min=0,mode=1,max=4)
df[i,colnames(df)== "SpoilageCon"]<-Levels
}
return(df)
}
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt2(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
View(Pre_Data.Frame)
Pre_Data.Frame$SpoilageCon<-0
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt2(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt3(Pre_Data.Frame)
endTime <- Sys.time()
Func_Adding_Initial_MilkCOnt<-function(df){
df$SpoilageCon<-rtri(nrow(df),min=0,mode=1,max=4)
# for (i in 1:nrow(df)){
#   Levels<-rtri(1,min=0,mode=1,max=4)
#   df[i,colnames(df)== "SpoilageCon"]<-Levels
# }
return(df)
}
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
View(Pre_Data.Frame)
Func_Adding_Initial_MilkCOnt<-function(df){
df$SpoilageCon<-rtri(nrow(df),min=0,mode=1,max=4)
# for (i in 1:nrow(df)){
#   Levels<-rtri(1,min=0,mode=1,max=4)
#   df[i,colnames(df)== "SpoilageCon"]<-Levels
# }
return(df)
}
startTime <- Sys.time()
Pre_Data.Frame<-Func_Adding_Initial_MilkCOnt(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
startTime <- Sys.time()
Pre_Data.Frame<-Func_Spoilage_YN(Pre_Data.Frame)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Main_Loop()
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
Main_Loop()
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
for i in 1:100{
Main_Loop()
}
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
for (i in 1:100){
Main_Loop()
}
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
sapply(1:100,Main_Loop)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
sapply(1:100,Main_Loop)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
startTime <- Sys.time()
output<-sapply(1:100,Main_Loop)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
output
func_student_iterations<-function(){
Output<-Main_Loop()
#Outputs based on the outputs selected from the simulation
if (Sim_Fruit == 1){
#Only saving dataframe as output if fruit is one/on
Fr_Data.Frame<-Output$Fr_Data.Frame
}
if (Sim_PSS==1)
{
#Only saving PSS Dataframe is PSS is one/on
Pss_Data.Frame<-Output$Pss_Data.Frame
}
#Only Saving PRE Dataframe is PRE is one/on
if (Sim_PRE==1){
Pre_Data.Frame<-Output$Pre_Data.Frame
}
}
startTime <- Sys.time()
sapply(1:100,func_student_iterations)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
func_student_iterations<-function(){
Output<-Main_Loop()
print("a")
#Outputs based on the outputs selected from the simulation
if (Sim_Fruit == 1){
#Only saving dataframe as output if fruit is one/on
Fr_Data.Frame<-Output$Fr_Data.Frame
}
if (Sim_PSS==1)
{
#Only saving PSS Dataframe is PSS is one/on
Pss_Data.Frame<-Output$Pss_Data.Frame
}
#Only Saving PRE Dataframe is PRE is one/on
if (Sim_PRE==1){
Pre_Data.Frame<-Output$Pre_Data.Frame
}
}
startTime <- Sys.time()
sapply(1:100,func_student_iterations)
endTime <- Sys.time()
# prints recorded time
print(endTime - startTime)
