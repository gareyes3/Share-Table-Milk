Changes_Over_Time_s54b<-Output_Milk_s54b[[2]]
for (i in 1:50){
AnalysysDF_s54b<- Appling_Changes(df = Outs_DFs_5s4b[[i]], Changes_Over_Time = Changes_Over_Time_s54b)
s54b_List<-append(s54b_List,list(AnalysysDF_s54b))
}
s54b_List_per_spoiled<-list()
for (i in 1:50){
s54b_List_per_spoiled<-append(s54b_List_per_spoiled,list(summary_per_spoiled(s54b_List[[i]])))
}
for (i in 1:50){
s54b_List_per_spoiled<-append(s54b_List_per_spoiled,list(summary_per_spoiled(s54b_List[[i]])))
}
Total_Milks_Spoiled_s54b<-Extracting_Total_SpoiledMilks(Output_Name = s54b_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s54b<-Extracting_Total_SpoiledMilks(Output_Name = s54b_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s54b
mean(Total_Milks_Spoiled_s54b)
range (Total_Milks_Spoiled_s54b)
#Percentage of spoiled milks per year
s54b_List_pecentage_spoiled<-c()
for (i in 1:50){
s54b_List_pecentage_spoiled<-c(s54b_List_pecentage_spoiled,(sum(s54b_List[[i]]$SpoilageCon>6)/length(s54b_List[[i]]$SpoilageCon)))
}
mean(s54b_List_pecentage_spoiled)
range (s54b_List_pecentage_spoiled)
#Population Summary
s54b_List_population<-c()
for (i in 1:50){
s54b_List_population<-c(s54b_List_population,s54b_List[[i]]$SpoilageCon)
}
mean(s54b_List_population) #CFU/mL
range (s54b_List_population)
#Time in System
s54b_List_Time<-c()
for (i in 1:50){
s54b_List_Time<-c(s54b_List_Time,s54b_List[[i]]$TotTime)
}
mean(s54b_List_Time) #CFU/mL
range (s54b_List_Time)
s43b_List<-list()
Output_Milk_s43b<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Df_RT_MT_s4b3, Interval =1/60,AF = 1.32)
Changes_Over_Time_s43b<-Output_Milk_s43b[[2]]
for (i in 1:50){
AnalysysDF_s43b<- Appling_Changes(df = Outs_DFs_4s3b[[i]], Changes_Over_Time = Changes_Over_Time_s43b)
s43b_List<-append(s43b_List,list(AnalysysDF_s43b))
}
s43b_List_per_spoiled<-list()
for (i in 1:50){
s43b_List_per_spoiled<-append(s43b_List_per_spoiled,list(summary_per_spoiled(s43b_List[[i]])))
}
for (i in 1:50){
s43b_List_per_spoiled<-append(s43b_List_per_spoiled,list(summary_per_spoiled(s43b_List[[i]])))
}
Total_Milks_Spoiled_s43b<-Extracting_Total_SpoiledMilks(Output_Name = s43b_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s43b<-Extracting_Total_SpoiledMilks(Output_Name = s43b_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s43b
Total_Milks_Spoiled_s43b
mean(Total_Milks_Spoiled_s43b)
range (Total_Milks_Spoiled_s43b)
#Range of milks per year
s43b_List_total_milks<-c()
for (i in 1:50){
s43b_List_total_milks<-c(s43b_List_total_milks,length(s43b_List[[i]]$ID))
}
mean(s43b_List_total_milks)
range(s43b_List_total_milks)
#Percentage of spoiled milks per year
s43b_List_pecentage_spoiled<-c()
for (i in 1:50){
s43b_List_pecentage_spoiled<-c(s43b_List_pecentage_spoiled,(sum(s43b_List[[i]]$SpoilageCon>6)/length(s43b_List[[i]]$SpoilageCon)))
}
mean(s43b_List_pecentage_spoiled)
range (s43b_List_pecentage_spoiled)
#Population Summary
s43b_List_population<-c()
for (i in 1:50){
s43b_List_population<-c(s43b_List_population,s43b_List[[i]]$SpoilageCon)
}
mean(s43b_List_population) #CFU/mL
range (s43b_List_population)
#Time in System
s43b_List_Time<-c()
for (i in 1:50){
s43b_List_Time<-c(s43b_List_Time,s43b_List[[i]]$TotTime)
}
mean(s43b_List_Time) #CFU/mL
range (s43b_List_Time)
save.image("C:/Users/gareyes3/Box/Share Table Project/Milk Spoilage Model Docs/Spoilage Rdata Corea et al/New Data/All_Scenarios Combined.RData")
load("~/GitHub/Share-Table-Milk/R/Milk_Spoilage_DataA.RData")
load("~/GitHub/Share-Table-Milk/R/Old R Data/Milk Spoilage 4-7-1000k weeks.RData")
#Summaries
AnalysysDF %>%
filter(Location == "Consumed") %>%
#filter(TotTime<1440) %>%
#filter(TotTime>1440 && TotTime<2280) %>%
#filter(TotTime>1440*2 && TotTime<1440*3) %>%
filter(TotTime>1440*3 && TotTime<1440*4) %>%
#filter(TotTime>1440*4 && TotTime<1440*5) %>%
nrow()
load("~/GitHub/Share-Table-Milk/R/Old R Data/.RData")
AnalysysDF %>%
ggplot(aes(x = TotTime))+
geom_histogram()+
scale_x_continuous(n.breaks= 10)+
labs(x = "Time in Hours", y = "Count ", title= "Time in system by Item week")+
theme(plot.title = element_text(hjust = 0.5))
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
AnalysysDF_2<-Individual_Analysis_Fr
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*75
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*75
AnalysysDF$Shared<-ifelse(AnalysysDF$STtimes>0, "Yes", "No")
AnalysysDF
gc()
load("~/GitHub/Share-Table-Milk/R/Old R Data/Milk Spoilage 4-7-1000k weeks.RData")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
AnalysysDF_2<-Individual_Analysis_Fr
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$Shared<-ifelse(AnalysysDF$STtimes>0, "Yes", "No")
AnalysysDF$Shared
AnalysysDF
load("~/GitHub/Share-Table-Milk/R/Old R Data/Milk Spoilage 4-11-100 weeks.RData")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
AnalysysDF_2<-Individual_Analysis_Fr
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*75
AnalysysDF
load("~/GitHub/Share-Table-Milk/R/Old R Data/Milk Spoilage 4-7-1000k weeks.RData")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
AnalysysDF_2<-Individual_Analysis_Fr
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*75
AnalysysDF
load("~/GitHub/Share-Table-Milk/R/R Dat Pinto et al/Milk Spoilage 4-13-1000k weeks- With milks.RData")
AnalysysDF
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
AnalysysDF_2<-Individual_Analysis_Fr
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*75
AnalysysDF$Shared<-ifelse(AnalysysDF$STtimes>0, "Yes", "No")
AnalysysDF
p_1<-AnalysysDF%>%
ggplot(aes(y = SpoilageCon, x= TotTime, fill= Shared, shape = Shared))+
geom_point( size =2, alpha = 0.7, color = "black")+
geom_hline(yintercept =6)+
geom_text(aes(2000,6.5,label = "Quality Threshold = 6.0"), color = "black", size  = 3,check_overlap = TRUE)+
facet_wrap(.~Location)+
labs(x = "Residence Time in Cafeteria System (min)", y = expression("Pseudomonas poae population (log"[10]~"CFU/ml)"))+
scale_y_continuous()+
scale_shape_manual(values = c(21,23))+
scale_fill_manual(values = c("coral1", "seagreen3"))+
#scale_x_log10(n.breaks= 12)+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))+
theme(axis.text.x = element_text(angle = -45, vjust = -0.3))+
theme(legend.position="bottom")+
geom_segment(aes(x = 1440 , y = -Inf, xend = 1440, yend = 6,linetype = "Start of Day") )+
geom_segment(aes(x = 2880 , y = -Inf, xend = 2880, yend = 6), linetype = "dotted") +
geom_segment(aes(x = 4320 , y = -Inf, xend = 4320, yend = 6), linetype = "dotted") +
geom_segment(aes(x = 0 , y = -Inf, xend = 0, yend = 6), linetype = "dotted") +
geom_segment(aes(x = 5760 , y = -Inf, xend = 5760, yend = 6), linetype = "dotted") +
scale_linetype_manual(name = "",values = c("dotted"))
#Summaries
AnalysysDF %>%
filter(Location == "Consumed") %>%
#filter(TotTime<1440) %>%
#filter(TotTime>1440 && TotTime<2280) %>%
#filter(TotTime>1440*2 && TotTime<1440*3) %>%
filter(TotTime>1440*3 && TotTime<1440*4) %>%
#filter(TotTime>1440*4 && TotTime<1440*5) %>%
nrow()
#Summaries
AnalysysDF %>%
filter(Location == "Consumed") %>%
#filter(TotTime<1440) %>%
#filter(TotTime>1440 && TotTime<2280) %>%
#filter(TotTime>1440*2 && TotTime<1440*3) %>%
#filter(TotTime>1440*3 && TotTime<1440*4) %>%
#filter(TotTime>1440*4 && TotTime<1440*5) %>%
nrow()
p_1
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
library(tidyverse)
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
gc()
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
library(tidyverse)
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
Time_Temp_Profile<-read.csv("5-Day-Milk-Data.csv")
Time_Temp_Profile_RC<-read.csv("5Days-Adjusted-Temp-RC.csv")
#Function for growth and lag phase
new_growth_rate<-function(newTemp, oldMu,oldTemp = 6, T0 = -4.15){
newMu<-((newTemp-T0)/(oldTemp-T0))* oldMu
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 6, T0 = -4.15) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"= rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval, AF){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)* AF#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60, AF){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval, AF=AF)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
#calculating the milk with the fixed model Adjustment Factor 1.32.
#Growth of milk over the ST 5 day condition
#Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = 0 ,Time_Temp_df = Time_Temp_Profile,Interval = 1/60, AF = 1.32)
Output_Milk<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Profile, Interval =1/60,AF = 1.32)
Changes_Over_Time<-2.44+Output_Milk[[2]]
plot(Changes_Over_Time)
#Growth of milk using overnight storage
Output_Milk_RC<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Profile_RC, Interval =1/60,AF = 1.32)
Changes_Over_Time_RC<-2.44+Output_Milk_RC[[2]]
plot(Changes_Over_Time_RC)
#calculating the milk with the fixed model Adjustment Factor 1.00.
#Growth of milk over the ST 5 day condition
Output_Milk<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Profile, Interval =1/60,AF = 1)
Changes_Over_Time_NAF<-2.44+Output_Milk[[2]]
#Growth of milk using overnight storage
Output_Milk_RC<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Profile_RC, Interval =1/60,AF = 1)
Changes_Over_Time_RC_NAF<-2.44+Output_Milk_RC[[2]]
### Creating Dfs
df_rt_AF = data.frame("Share Table" = Changes_Over_Time,
"Refrigerated Control" = Changes_Over_Time_RC[1:length(Changes_Over_Time)],
"min" = 1:length(Changes_Over_Time))
df_rt_AF_melted<-melt(df_rt_AF,id.vars = "min")
df_rt_AF_melted$AF = "Adjusted (Factor = 1.32)"
df_rt_NAF = data.frame("Share Table" =Changes_Over_Time_NAF,
"Refrigerated Control" = Changes_Over_Time_RC_NAF[1:length(Changes_Over_Time_NAF)],
"min" = 1:length(Changes_Over_Time_NAF))
df_rt_NAF_melted<-melt(df_rt_NAF,id.vars = "min" )
df_rt_NAF_melted$AF = "Not Adjusted"
December_Growth_Data_R1<-data.frame("min" = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885),
"counts" = c(2.53,2.48, 3.65,3.95,4.87, 5.18, 6.3,6.32,6.89,7.1))
December_Growth_Data_R2<-data.frame("min" = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885),
"counts" = c(2.51,2.81, 3.69, 3.76, 5.02, 5.11, 6.24,6.41,7.19,7.15))
December_Growth_Data_R3<-data.frame("min" = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885),
"counts" = c(2.62, 2.9,3.62,3.59,  4.94, 5.12,6.16, 6.38,7.13,7.2))
December_Growth_Data_Comb = rbind(December_Growth_Data_R1,December_Growth_Data_R2,December_Growth_Data_R3)
December_RC_Data_Comb<-data.frame("min" = c(0,1440,2880,4320,5760),
"counts" = c(2.44, 3.25,4.31,5.39,6.19))
Data_For_Plot = rbind(df_rt_AF_melted,df_rt_NAF_melted)
ggplot(aes(x = min, y = value), data = Data_For_Plot)+
geom_line(aes(color = variable), size = 1)+
facet_wrap(~AF)+
theme_bw()+
theme(legend.position="bottom",legend.box="vertical")+
geom_point(data = December_Growth_Data_Comb, aes(x  = min, y = counts, fill = "Experimental ST System 2hr"), shape = 21)+
geom_point(data = December_RC_Data_Comb, aes(x  = min, y = counts,fill = "Experiment Refrigerated Control"), shape = 22)+
scale_fill_manual(name = "",values = c("Experimental ST System 2hr" = "coral", "Experiment Refrigerated Control" = "darkblue"))+
scale_color_discrete(name = "",labels=c('Modeled ST System 2hr',"Experiment Refrigerated Control"))+
geom_hline(yintercept = 6.0, color = "black", linewidth = 1)+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 3,check_overlap = TRUE)+
labs(x= "Residence time in system (min)", y = expression("Average log"[10]~"CFU/ml"))
ggsave("Predicted vs Experimental.jpg", width =7, height = 5, units = "in", dpi = 300)
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
library(tidyverse)
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
Time_Temp_Profile<-read.csv("5-Day-Milk-Data.csv")
Time_Temp_Profile_RC<-read.csv("5Days-Adjusted-Temp-RC.csv")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
save.image("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R/R Dat Pinto et al/Rdata Pinto et al 2023.RData")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
AnalysysDF_2<-Individual_Analysis_Fr
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*75
AnalysysDF
shiny::runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
shiny::runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
traceback()
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
runApp('~/GitHub/Powder-App-Sandbox/Powder-App')
