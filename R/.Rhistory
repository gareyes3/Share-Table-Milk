#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Function for growth and lag phase
new_growth_rate<-function(newTemp, oldMu,oldTemp = 6, T0 = -4.15){
newMu<-((newTemp-T0)/(oldTemp-T0))* oldMu
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 6, T0 = -4.15) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"= rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval, AF){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$MilkTemp[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$MilkTemp[i], oldMu = old_mumax))/2.303)* AF#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60, AF){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval, AF=AF)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
#Applying Changes over time with N max limit
Appling_Changes<-function(df,Changes_Over_Time){
NMax = 8.14
Contamination_v<-df$InSpoilageCon
Time_V<-df$TotTime
Final_contamination_v<-c()
for (i in 1:nrow(df)){
In_Cont<-Contamination_v[i]
Time<-Time_V[i]
if (Time == 0){
Total_Growth = 0
}else{
Total_Growth<-Changes_Over_Time[Time]
}
Final_Con<-In_Cont+Total_Growth
if(Final_Con>NMax){
Final_Con <- NMax
}
Final_contamination_v<-c(Final_contamination_v,Final_Con)
}
df$SpoilageCon<-Final_contamination_v
return(df)
}
#Before Running this make sure that the files from "Time and Temperature Profiles.rmd" have been generated accordingly
## Primary Scenarios
#Room Temp B
Df_RT_MT_RTB<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB.csv")
#Refrigerated Tray
Df_RT_MT_RT<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RT.csv")
#Tray With Ice Packs
Df_RT_MT_TIP<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_TIP.csv")
#Tray with Ice
Df_RT_MT_TIC<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_TIC.csv")
#Cooler with Ice
Df_RT_MT_CI<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_CI.csv")
#room temp b with ref break
Df_RT_MT_RTB_refB<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB_refB.csv")
## Temperature Scenarios
#Room Temp B
Df_RT_MT_RTB_18C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB_18C.csv")
#Refrigerated Tray
Df_RT_MT_RTB_21C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB_21C.csv")
#Tray With Ice Packs
Df_RT_MT_RTB_23C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_RTB_23C.csv")
## Updated Refrigeration Temps
Df_RT_MT_Ref_7C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_Ref_7C.csv")
Df_RT_MT_Ref_2C<-read.csv("Pedicted Time and Temp Profiles/Df_RT_MT_Ref_2C.csv")
#Total Time
summary_Times<-function(df){
a<-df %>%
#filter(Shared == "No") %>%
group_by(Shared) %>%
dplyr::summarize(All_time=median(TotTime), Alltime_q25 = quantile(TotTime, 0.025), Alltime_q975 = quantile(TotTime, 0.975))
b<-df %>%
#filter(Shared == "No") %>%
group_by(NULL) %>%
dplyr::summarize(All_time=median(TotTime), Alltime_q25 = quantile(TotTime, 0.025), Alltime_q975 = quantile(TotTime, 0.975)) %>%
mutate(Shared = "All") %>%
select(Shared,All_time,Alltime_q25,Alltime_q975)
return(rbind(a,b))
}
summary_location_per<-function(df){
a<-df %>%
group_by(Location) %>%
dplyr::summarize(count = n(),
Day_1 = sum(TotTime<1440)/count,
Day_2 = sum(TotTime>1440 & TotTime<1440*2)/count,
Day_3 = sum(TotTime>1440*2 & TotTime<1440*3)/count,
Day_4 = sum(TotTime>1440*3 & TotTime<1440*4)/count,
Day_5 = sum(TotTime>1440*4 & TotTime<1440*5)/count
)
return (a)
}
summary_per_spoiled<-function(df){
#Spoiled Milks
a<-df %>%
#filter(Shared == "Yes") %>%
group_by(Shared) %>%
dplyr::summarize(All_Total_Spoiled = sum(SpoilageCon>6), percentage = (sum(SpoilageCon>6)/n()))
b<-df %>%
#filter(Shared == "Yes") %>%
group_by(NULL) %>%
dplyr::summarize(All_Total_Spoiled = sum(SpoilageCon>6), percentage = (sum(SpoilageCon>6)/n())) %>%
mutate(Shared = "All") %>%
select(Shared,All_Total_Spoiled,percentage)
return(rbind(a,b))
}
summary_pop_change<-function(df){
#Population Change
#Population Change
a<-df %>%
#filter(Shared == "Yes") %>%
group_by(Shared) %>%
dplyr::summarize(PopC_All_Med = median(SpoilageCon - InSpoilageCon), PopC_All_q25 = quantile(SpoilageCon - InSpoilageCon, 0.025), PopC_All_q975 = quantile(SpoilageCon - InSpoilageCon, 0.975))
b<-df %>%
#filter(Shared == "Yes") %>%
group_by(NULL) %>%
dplyr::summarize(PopC_All_Med = median(SpoilageCon - InSpoilageCon), PopC_All_q25 = quantile(SpoilageCon - InSpoilageCon, 0.025), PopC_All_q975 = quantile(SpoilageCon - InSpoilageCon, 0.975)) %>%
mutate(Shared = "All") %>%
select(Shared,PopC_All_Med,PopC_All_q25,PopC_All_q975)
return(rbind(a,b))
}
#This chunk Runs the ST Model
#Temp_Profile<-Df_RT_MT_RTB
Obtaining_Spoiled_Milks<-function(Temp_Profile, N_Years, Service_Length,TurningT_Length){
final_list <- list()
Outputs_List_TotalMilks<-list()
#Outputs_List_location_per<-list()
Outputs_List_per_spoiled<-list()
Outputs_List_pop_change<-list()
#Define the length of periods to match your model to properly adjust time.
Service_Length = Service_Length#50
TurningT_Length = TurningT_Length#25
for (i in 1:N_Years){
start_time<-Sys.time()
source("Main_Loops2.R")
#1. Start from here
Individual_Analysis_Milk<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Milk<-Individual_Analysis_Milk %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Milk
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*(Service_Length+TurningT_Length)
AnalysysDF$Shared<-ifelse(AnalysysDF$STtimes>0, "Yes", "No")
Output_Milk<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Temp_Profile, Interval =1/60,AF = 1.32)
Changes_Over_Time<-Output_Milk[[2]]
#If data frame is large this make time ~20 mins
AnalysysDF<- Appling_Changes(df = AnalysysDF,
Changes_Over_Time = Changes_Over_Time)
Outputs_List_TotalMilks<-append(Outputs_List_TotalMilks,nrow(AnalysysDF))
#Outputs_List_location_per<-append(Outputs_List_location_per,list(summary_location_per(AnalysysDF)))
Outputs_List_per_spoiled<-append(Outputs_List_per_spoiled,list(summary_per_spoiled(AnalysysDF)))
Outputs_List_pop_change<-append(Outputs_List_pop_change,list(summary_pop_change(AnalysysDF)))
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
}
return(list( Outputs_List_TotalMilks,Outputs_List_per_spoiled,Outputs_List_pop_change))
}
Obtaining_Spoiled_Milks_DFs<-function(N_Years, Service_Length,TurningT_Length){
final_list <- list()
#Define the length of periods to match your model to properly adjust time.
Service_Length = Service_Length#50
TurningT_Length = TurningT_Length#25
for (i in 1:N_Years){
print(i)
start_time<-Sys.time()
source("Main_Loops2.R")
#1. Start from here
Individual_Analysis_Milk<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Milk<-Individual_Analysis_Milk %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Milk
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*(Service_Length+TurningT_Length)
AnalysysDF$Shared<-ifelse(AnalysysDF$STtimes>0, "Yes", "No")
final_list<-append(final_list,list(AnalysysDF))
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
}
return(final_list)
}
source("Input_Static.R")
Outs_DFs_HighCont<-Obtaining_Spoiled_Milks_DFs(N_Years = 50, Service_Length = 50,TurningT_Length = 25)
save.image("C:/Users/Gustavo Reyes/Box/Share Table Project/Milk Spoilage Model Docs/Spoilage Rdata Corea et al/New Data/HighCont.RData")
Condition_Data<-read.csv("Bevier_Trial_Temps_External.csv")
predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Ambient.Temperature, Initial_Temp = Condition_Data$Ambient[1])
#Standard Inputs
rho <-1.033 #kg/L
C <- 4.2 #kj/KgC°
V <- 0.236 #L
A <- 0.004275 #m2
get_h<-function(Neg_slope, rho = 1.033, C = 4.2 , V = 0.236, A = 0.004275){
neg_h =  ((Neg_slope*rho*C*V)/A)
return(- neg_h)
}
#Negative Slopes
Neg_Slope_RTB<-(-0.0124) #Room Temperature
Neg_Slope_Ref<-(-0.0141) #Refrigeration
Neg_Slope_RT<-(-0.0088) #Refrigerated Tray
Neg_Slope_TIC<-(-0.0057) #Tray with Ice
Neg_Slope_TIP<-(-0.0072) #Tray with Ice Packs
Neg_Slope_CI<-(-0.0019) #Cooler with Ice
#Getting the Heat Transfer Coefficients for each Temp
h_RTB = get_h(Neg_slope = Neg_Slope_RTB)
h_ref = get_h(Neg_slope = Neg_Slope_Ref)
h_RT = get_h(Neg_slope = Neg_Slope_RT)
h_TIC = get_h(Neg_slope = Neg_Slope_TIC)
h_TIP = get_h(Neg_slope = Neg_Slope_TIP)
h_CI = get_h(Neg_slope = Neg_Slope_CI)
#Function to get temperature as a constant time and temperature
get_temp<-function(h, To, Tinf, time,  A =0.004275,rho =1.033, C= 4.2, V = 0.236 ){
#Time in minutes
#Tinf = External Temp
#To = Initial temperature of the milk
# h = convection trans coefficient for that condition
return (exp(-(h*A/rho*C*V)*(time))*(To-Tinf)+Tinf)
}
#Standard Inputs
rho <-1.033 #kg/L
C <- 4.2 #kj/KgC°
V <- 0.236 #L
A <- 0.004275 #m2
get_h<-function(Neg_slope, rho = 1.033, C = 4.2 , V = 0.236, A = 0.004275){
neg_h =  ((Neg_slope*rho*C*V)/A)
return(- neg_h)
}
#Negative Slopes
Neg_Slope_RTB<-(-0.0124) #Room Temperature
Neg_Slope_Ref<-(-0.0141) #Refrigeration
Neg_Slope_RT<-(-0.0088) #Refrigerated Tray
Neg_Slope_TIC<-(-0.0057) #Tray with Ice
Neg_Slope_TIP<-(-0.0072) #Tray with Ice Packs
Neg_Slope_CI<-(-0.0009) #Cooler with Ice
#Getting the Heat Transfer Coefficients for each Temp
h_RTB = get_h(Neg_slope = Neg_Slope_RTB)
h_ref = get_h(Neg_slope = Neg_Slope_Ref)
h_RT = get_h(Neg_slope = Neg_Slope_RT)
h_TIC = get_h(Neg_slope = Neg_Slope_TIC)
h_TIP = get_h(Neg_slope = Neg_Slope_TIP)
h_CI = get_h(Neg_slope = Neg_Slope_CI)
#Function to get temperature as a constant time and temperature
get_temp<-function(h, To, Tinf, time,  A =0.004275,rho =1.033, C= 4.2, V = 0.236 ){
#Time in minutes
#Tinf = External Temp
#To = Initial temperature of the milk
# h = convection trans coefficient for that condition
return (exp(-(h*A/rho*C*V)*(time))*(To-Tinf)+Tinf)
}
#Constant outside temperature
predict_temp<-function(Initial_Temp, Room_temp, Total_min, h_condition){
#Returns a vector of temperatures
Total_Time_min = Total_min
Temp_Initial = Initial_Temp
T_inf = Room_temp
Temp_V<-c()
for (i in 1:Total_Time_min){
if (i == 1){
New_Temp = Temp_Initial
}else if (i == 2){
New_Temp = get_temp(h = h_condition, To = Temp_Initial, Tinf =  T_inf, time = 1)
}else{
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
}
Temp_V<-c(Temp_V, New_Temp)
}
return (Temp_V)
}
predict_temp(Initial_Temp = 4.5,Room_temp = 22, Total_min = 42, h_condition = h_RTB)
#Predicting the temperature from a complete time and temperature profile.
predict_temp_fromProf<-function(Time_Temp_Prof, Initial_Temp,h_condition){
Time_Temp_Profile<-Time_Temp_Prof
Temp_Initial = Initial_Temp
Temp_V<-c()
for (i in 1:length(Time_Temp_Profile)){
T_inf<-Time_Temp_Profile[i]
if (i == 1){
New_Temp = Temp_Initial
}else if (i == 2){
New_Temp = get_temp(h = h_condition, To = Temp_Initial, Tinf =  T_inf, time = 1)
}else{
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
}
Temp_V<-c(Temp_V, New_Temp)
}
return(Temp_V)
}
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"= rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
calc_rmse=function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
Condition_Data<-read.csv("Bevier_Trial_Temps_External.csv")
predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Ambient.Temperature, Initial_Temp = Condition_Data$Ambient[1])
predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Ambient.Temperature, Initial_Temp = Condition_Data$Ambient[1], h_condition = h_RTB)
Predicted_RTB<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Ambient.Temperature, Initial_Temp = Condition_Data$Ambient[1], h_condition = h_RTB)
Predicted_RTB<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Ambient.Temperature, Initial_Temp = Condition_Data$Ambient[1], h_condition = h_RTB)
Predicted_RTB
Condition_Data_InternalMilk<-read.csv("Bevier_Trial_Temps_Internal.csv")
calc_rmse(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB)
calc_rmse(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB[1:50])
Predicted_RTB[1:50]
Predicted_RTB<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Ambient.Temperature, Initial_Temp = Condition_Data_InternalMilk$Ambient.Temperature[1], h_condition = h_RTB)
calc_rmse(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB[1:50])
Predicted_RTB
Predicted_RT<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Refrigerated.Tray, Initial_Temp = Condition_Data_InternalMilk$Refrigerated.Tray[1], h_condition = h_RT)
calc_rmse(actual = Condition_Data_InternalMilk$Refrigerated.Tray, predicted = Predicted_RT[1:50])
Predicted_TI<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice, Initial_Temp = Condition_Data_InternalMilk$Tray.with.Ice[1], h_condition = h_TI)
Predicted_TI<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice, Initial_Temp = Condition_Data_InternalMilk$Tray.with.Ice[1], h_condition = h_TIC)
Predicted_TIC<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice.Packs, Initial_Temp = Condition_Data_InternalMilk$$Tray.with.Ice.Packs[1], h_condition = h_RTB)
Predicted_TIC<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice.Packs, Initial_Temp = Condition_Data_InternalMilk$Tray.with.Ice.Packs[1], h_condition = h_RTB)
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice, predicted = Predicted_TI[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice.Packs, predicted = Predicted_TIP[1:50])
Predicted_TIP<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Tray.with.Ice.Packs, Initial_Temp = Condition_Data_InternalMilk$Tray.with.Ice.Packs[1], h_condition = h_TIP)
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice.Packs, predicted = Predicted_TIP[1:50])
Predicted_CI<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Cooler.with.Ice, Initial_Temp = Condition_Data_InternalMilk$Cooler.with.Ice[1], h_condition = h_CI)
calc_rmse(actual = Condition_Data_InternalMilk$Cooler.with.Ice, predicted = Predicted_CI[1:50])
Condition_Data
Condition_Data
PredictionDf<-data.frame("Time" = c(1:50),
"Ambient.Temperature" = Predicted_RTB,
"Cooler.with.Ice" = Predicted_CI,
"Tray.with.Ice"= Predicted_TIC,
"Tray.with.Ice.Packs"= Predicted_TIP,
"Refrigerated.Tray" = Predicted_RT)
PredictionDf<-data.frame("Time" = c(1:51),
"Ambient.Temperature" = Predicted_RTB,
"Cooler.with.Ice" = Predicted_CI,
"Tray.with.Ice"= Predicted_TIC,
"Tray.with.Ice.Packs"= Predicted_TIP,
"Refrigerated.Tray" = Predicted_RT)
melt(Condition_Data_InternalMilk)
library(reshape2)
melt(Condition_Data_InternalMilk)
Condition_Data_InternalMilk
reshape2::melt(Condition_Data_InternalMilk)
reshape2::melt(Condition_Data_InternalMilk, id.vars = "Time")
Internal_DF<-reshape2::melt(Condition_Data_InternalMilk, id.vars = "Time")
Internal_DF$type<-"Observed"
Predicted_DF<-reshape2::melt(PredictionDf, id.vars = "Time")
Predicted_DF$type<-"Predicted"
rbind(Internal_DF,Predicted_DF)
Predicted_vs_Observed<-rbind(Internal_DF,Predicted_DF)
Predicted_vs_Observed
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value))
library(ggplot2)
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value))
Predicted_vs_Observed
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value))+
facet_wrap(~variable)
Predicted_vs_Observed
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value = type))
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type))
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type))+
facet_wrap(~variable)
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type))+
facet_wrap(~variable)+
theme_bw()
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type))+
facet_wrap(~variable, scales = "free_y")+
theme_bw()
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice, predicted = Predicted_TI[1:50])
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type))+
facet_wrap(~variable, scales = "free_y")+
theme_bw()
PredictionDf<-data.frame("Time" = c(1:51),
"Ambient.Temperature" = Predicted_RTB,
"Cooler.with.Ice" = Predicted_CI,
"Tray.with.Ice"= Predicted_TI,
"Tray.with.Ice.Packs"= Predicted_TIP,
"Refrigerated.Tray" = Predicted_RT)
library(reshape2)
library(ggplot2)
Internal_DF<-reshape2::melt(Condition_Data_InternalMilk, id.vars = "Time")
Internal_DF$type<-"Observed"
Predicted_DF<-reshape2::melt(PredictionDf, id.vars = "Time")
Predicted_DF$type<-"Predicted"
Predicted_vs_Observed<-rbind(Internal_DF,Predicted_DF)
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type))+
facet_wrap(~variable, scales = "free_y")+
theme_bw()
Neg_Slope_CI<-(-0.0019) #Cooler with Ice
#Getting the Heat Transfer Coefficients for each Temp
h_RTB = get_h(Neg_slope = Neg_Slope_RTB)
h_ref = get_h(Neg_slope = Neg_Slope_Ref)
h_RT = get_h(Neg_slope = Neg_Slope_RT)
h_TIC = get_h(Neg_slope = Neg_Slope_TIC)
h_TIP = get_h(Neg_slope = Neg_Slope_TIP)
h_CI = get_h(Neg_slope = Neg_Slope_CI)
#Function to get temperature as a constant time and temperature
get_temp<-function(h, To, Tinf, time,  A =0.004275,rho =1.033, C= 4.2, V = 0.236 ){
#Time in minutes
#Tinf = External Temp
#To = Initial temperature of the milk
# h = convection trans coefficient for that condition
return (exp(-(h*A/rho*C*V)*(time))*(To-Tinf)+Tinf)
}
Predicted_CI<-predict_temp_fromProf(Time_Temp_Prof =Condition_Data$Cooler.with.Ice, Initial_Temp = Condition_Data_InternalMilk$Cooler.with.Ice[1], h_condition = h_CI)
calc_rmse(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Ambient.Temperature, predicted = Predicted_RTB[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Refrigerated.Tray, predicted = Predicted_RT[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice, predicted = Predicted_TI[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Tray.with.Ice.Packs, predicted = Predicted_TIP[1:50])
calc_rmse(actual = Condition_Data_InternalMilk$Cooler.with.Ice, predicted = Predicted_CI[1:50])
PredictionDf<-data.frame("Time" = c(1:51),
"Ambient.Temperature" = Predicted_RTB,
"Cooler.with.Ice" = Predicted_CI,
"Tray.with.Ice"= Predicted_TI,
"Tray.with.Ice.Packs"= Predicted_TIP,
"Refrigerated.Tray" = Predicted_RT)
library(reshape2)
library(ggplot2)
Internal_DF<-reshape2::melt(Condition_Data_InternalMilk, id.vars = "Time")
Internal_DF$type<-"Observed"
Predicted_DF<-reshape2::melt(PredictionDf, id.vars = "Time")
Predicted_DF$type<-"Predicted"
Predicted_vs_Observed<-rbind(Internal_DF,Predicted_DF)
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type))+
facet_wrap(~variable, scales = "free_y")+
theme_bw()
calc_rmse(actual = Condition_Data_InternalMilk$Cooler.with.Ice, predicted = Predicted_CI[1:50])
ggplot(Predicted_vs_Observed, aes(x = Time))+
geom_point(aes(y = value, color = type))+
geom_line(aes(y = value, color = type))+
facet_wrap(~variable, scales = "free_y")+
theme_bw()
