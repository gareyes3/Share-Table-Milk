NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)* 1.2#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<-Time_Temp_Df[1:7196,]
Time_Temp_Df$Type = "Refrigerated Control"
Spoil_RC = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoil_RC[[1]]
Spoilage_Data = read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
colnames(Spoilage_Data)<-c("min", "tempM", "tempR")
Spoilage_Data = Spoilage_Data[,-3]
Spoilage_Data$Type<- "2hr_Out"
Spoil_ST = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Spoilage_Data, Interval =1/60)
Spoil_ST[[1]]
Combined_DF = data.frame("2hr_Out" =2.44+Spoil_ST[[2]],
"Ref_Control" = 2.44+Spoil_RC[[2]],
"min" = 1:7196)
Combined_DF_melted<-melt(Combined_DF,id.vars = "min")
ggplot()+
geom_point(aes(x = min, y = value, color = variable), data = Combined_DF_melted)+
geom_point(aes(x = c(0,1440,2880,4320,5760), y = c(2.44, 3.25,4.31,5.39,6.19), color = "pink"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.53,2.48, 3.65,3.95,4.87, 5.18, 6.3,6.32,6.89,7.1),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.51,2.81, 3.69, 3.76, 5.02, 5.11, 6.24,6.41,7.19,7.15),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.62, 2.9,3.62,3.59,  4.94, 5.12,6.16, 6.38,7.13,7.2),color = "red"))+
labs(x = "Minutes" ,y = expression("Average log"[10]~"CFU/ml"))+
theme_bw()+
scale_color_discrete(name = "Condition",labels=c("Experiment Refrigerated Control","Experimental ST System 2hr",'Modeled ST System 2hr', 'Modeled Refrigerated Control') )+
geom_hline(yintercept = 6.0, color = "black", linewidth = 1)+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)* 1.3#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
Spoilage_Data = read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
colnames(Spoilage_Data)<-c("min", "tempM", "tempR")
Spoilage_Data = Spoilage_Data[,-3]
Spoilage_Data$Type<- "2hr_Out"
Spoil_ST = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Spoilage_Data, Interval =1/60)
Spoil_ST[[1]]
Combined_DF = data.frame("2hr_Out" =2.44+Spoil_ST[[2]],
"Ref_Control" = 2.44+Spoil_RC[[2]],
"min" = 1:7196)
Combined_DF_melted<-melt(Combined_DF,id.vars = "min")
ggplot()+
geom_point(aes(x = min, y = value, color = variable), data = Combined_DF_melted)+
geom_point(aes(x = c(0,1440,2880,4320,5760), y = c(2.44, 3.25,4.31,5.39,6.19), color = "pink"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.53,2.48, 3.65,3.95,4.87, 5.18, 6.3,6.32,6.89,7.1),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.51,2.81, 3.69, 3.76, 5.02, 5.11, 6.24,6.41,7.19,7.15),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.62, 2.9,3.62,3.59,  4.94, 5.12,6.16, 6.38,7.13,7.2),color = "red"))+
labs(x = "Minutes" ,y = expression("Average log"[10]~"CFU/ml"))+
theme_bw()+
scale_color_discrete(name = "Condition",labels=c("Experiment Refrigerated Control","Experimental ST System 2hr",'Modeled ST System 2hr', 'Modeled Refrigerated Control') )+
geom_hline(yintercept = 6.0, color = "black", linewidth = 1)+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)* 1.4#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<-Time_Temp_Df[1:7196,]
Time_Temp_Df$Type = "Refrigerated Control"
Spoil_RC = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoil_RC[[1]]
Spoilage_Data = read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
colnames(Spoilage_Data)<-c("min", "tempM", "tempR")
Spoilage_Data = Spoilage_Data[,-3]
Spoilage_Data$Type<- "2hr_Out"
Spoil_ST = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Spoilage_Data, Interval =1/60)
Spoil_ST[[1]]
Combined_DF = data.frame("2hr_Out" =2.44+Spoil_ST[[2]],
"Ref_Control" = 2.44+Spoil_RC[[2]],
"min" = 1:7196)
Combined_DF_melted<-melt(Combined_DF,id.vars = "min")
ggplot()+
geom_point(aes(x = min, y = value, color = variable), data = Combined_DF_melted)+
geom_point(aes(x = c(0,1440,2880,4320,5760), y = c(2.44, 3.25,4.31,5.39,6.19), color = "pink"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.53,2.48, 3.65,3.95,4.87, 5.18, 6.3,6.32,6.89,7.1),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.51,2.81, 3.69, 3.76, 5.02, 5.11, 6.24,6.41,7.19,7.15),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.62, 2.9,3.62,3.59,  4.94, 5.12,6.16, 6.38,7.13,7.2),color = "red"))+
labs(x = "Minutes" ,y = expression("Average log"[10]~"CFU/ml"))+
theme_bw()+
scale_color_discrete(name = "Condition",labels=c("Experiment Refrigerated Control","Experimental ST System 2hr",'Modeled ST System 2hr', 'Modeled Refrigerated Control') )+
geom_hline(yintercept = 6.0, color = "black", linewidth = 1)+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)* 1.35#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<-Time_Temp_Df[1:7196,]
Time_Temp_Df$Type = "Refrigerated Control"
Spoil_RC = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoil_RC[[1]]
Spoilage_Data = read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
colnames(Spoilage_Data)<-c("min", "tempM", "tempR")
Spoilage_Data = Spoilage_Data[,-3]
Spoilage_Data$Type<- "2hr_Out"
Spoil_ST = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Spoilage_Data, Interval =1/60)
Spoil_ST[[1]]
Combined_DF = data.frame("2hr_Out" =2.44+Spoil_ST[[2]],
"Ref_Control" = 2.44+Spoil_RC[[2]],
"min" = 1:7196)
Combined_DF_melted<-melt(Combined_DF,id.vars = "min")
ggplot()+
geom_point(aes(x = min, y = value, color = variable), data = Combined_DF_melted)+
geom_point(aes(x = c(0,1440,2880,4320,5760), y = c(2.44, 3.25,4.31,5.39,6.19), color = "pink"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.53,2.48, 3.65,3.95,4.87, 5.18, 6.3,6.32,6.89,7.1),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.51,2.81, 3.69, 3.76, 5.02, 5.11, 6.24,6.41,7.19,7.15),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.62, 2.9,3.62,3.59,  4.94, 5.12,6.16, 6.38,7.13,7.2),color = "red"))+
labs(x = "Minutes" ,y = expression("Average log"[10]~"CFU/ml"))+
theme_bw()+
scale_color_discrete(name = "Condition",labels=c("Experiment Refrigerated Control","Experimental ST System 2hr",'Modeled ST System 2hr', 'Modeled Refrigerated Control') )+
geom_hline(yintercept = 6.0, color = "black", linewidth = 1)+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)#* 1.35#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<-Time_Temp_Df[1:7196,]
Time_Temp_Df$Type = "Refrigerated Control"
Spoil_RC = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoil_RC[[1]]
Spoilage_Data = read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
colnames(Spoilage_Data)<-c("min", "tempM", "tempR")
Spoilage_Data = Spoilage_Data[,-3]
Spoilage_Data$Type<- "2hr_Out"
Spoil_ST = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Spoilage_Data, Interval =1/60)
Spoil_ST[[1]]
Combined_DF = data.frame("2hr_Out" =2.44+Spoil_ST[[2]],
"Ref_Control" = 2.44+Spoil_RC[[2]],
"min" = 1:7196)
Combined_DF_melted<-melt(Combined_DF,id.vars = "min")
ggplot()+
geom_point(aes(x = min, y = value, color = variable), data = Combined_DF_melted)+
geom_point(aes(x = c(0,1440,2880,4320,5760), y = c(2.44, 3.25,4.31,5.39,6.19), color = "pink"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.53,2.48, 3.65,3.95,4.87, 5.18, 6.3,6.32,6.89,7.1),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.51,2.81, 3.69, 3.76, 5.02, 5.11, 6.24,6.41,7.19,7.15),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.62, 2.9,3.62,3.59,  4.94, 5.12,6.16, 6.38,7.13,7.2),color = "red"))+
labs(x = "Minutes" ,y = expression("Average log"[10]~"CFU/ml"))+
theme_bw()+
scale_color_discrete(name = "Condition",labels=c("Experiment Refrigerated Control","Experimental ST System 2hr",'Modeled ST System 2hr', 'Modeled Refrigerated Control') )+
geom_hline(yintercept = 6.0, color = "black", linewidth = 1)+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
Combined_DF = data.frame("2hr_Out" =2.44+Spoil_ST[[2]],
"Ref_Control" = 2.44+Spoil_RC[[2]],
"min" = 1:7196)
Combined_DF_melted<-melt(Combined_DF,id.vars = "min")
ggplot()+
geom_point(aes(x = min, y = value, color = variable), data = Combined_DF_melted)+
geom_point(aes(x = c(0,1440,2880,4320,5760), y = c(2.44, 3.25,4.31,5.39,6.19), color = "pink"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.53,2.48, 3.65,3.95,4.87, 5.18, 6.3,6.32,6.89,7.1),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.51,2.81, 3.69, 3.76, 5.02, 5.11, 6.24,6.41,7.19,7.15),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.62, 2.9,3.62,3.59,  4.94, 5.12,6.16, 6.38,7.13,7.2),color = "red"))+
labs(x = "Minutes" ,y = expression("Average log"[10]~"CFU/ml"))+
theme_bw()+
scale_color_discrete(name = "Condition",labels=c("Experiment Refrigerated Control","Experimental ST System 2hr",'Modeled ST System 2hr', 'Modeled Refrigerated Control') )+
geom_hline(yintercept = 6.0, color = "black", linewidth = 1)+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)*0.684#* 1.35#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<-Time_Temp_Df[1:7196,]
Time_Temp_Df$Type = "Refrigerated Control"
Spoil_RC = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoil_RC[[1]]
Spoilage_Data = read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
colnames(Spoilage_Data)<-c("min", "tempM", "tempR")
Spoilage_Data = Spoilage_Data[,-3]
Spoilage_Data$Type<- "2hr_Out"
Spoil_ST = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Spoilage_Data, Interval =1/60)
Spoil_ST[[1]]
Combined_DF = data.frame("2hr_Out" =2.44+Spoil_ST[[2]],
"Ref_Control" = 2.44+Spoil_RC[[2]],
"min" = 1:7196)
Combined_DF_melted<-melt(Combined_DF,id.vars = "min")
ggplot()+
geom_point(aes(x = min, y = value, color = variable), data = Combined_DF_melted)+
geom_point(aes(x = c(0,1440,2880,4320,5760), y = c(2.44, 3.25,4.31,5.39,6.19), color = "pink"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.53,2.48, 3.65,3.95,4.87, 5.18, 6.3,6.32,6.89,7.1),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.51,2.81, 3.69, 3.76, 5.02, 5.11, 6.24,6.41,7.19,7.15),color = "red"))+
geom_point(aes(x = c(0,125,1440,1565,2880,3005,4320,4195,5760,5885), y = c(2.62, 2.9,3.62,3.59,  4.94, 5.12,6.16, 6.38,7.13,7.2),color = "red"))+
labs(x = "Minutes" ,y = expression("Average log"[10]~"CFU/ml"))+
theme_bw()+
scale_color_discrete(name = "Condition",labels=c("Experiment Refrigerated Control","Experimental ST System 2hr",'Modeled ST System 2hr', 'Modeled Refrigerated Control') )+
geom_hline(yintercept = 6.0, color = "black", linewidth = 1)+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
