LogRed_Prior = rpert(1,0.17,0.45,6,shape = 4) #Reduction due to Hanwashing Stration
Cont_Student<-round(Cont_Student*10^-LogRed_Prior,0)
}
if (Sanitizing_Station == 1){
LogRed_Prior<-Func_Randomize_Sanitizer(Wash_Method = Sanitizer_Method) #Reduction due to hand sanitizer
Cont_Student<-round(Cont_Student*10^-LogRed_Prior,0)
}
Is_Student_ill<-1
if(Is_Student_ill==1){
Vector_Is_Student_ill<-c(Vector_Is_Student_ill,Is_Student_ill)
}
}
#Runing Self assigned Student pathogen contamination
if(Toggle_SelfAssigned_Pathogens==1){
if( k == Student_Pathogen_Day[Student_Pathogen_Count]
&& j == Student_Pathogen_Service[Student_Pathogen_Count]
&& z == Student_Pathogen_No[Student_Pathogen_Count]){
Cont_Student<-do.call(Func_ICont_Student,Inputs_ICont_Student)
print(Cont_Student)
Student_Pathogen_Count<-(Student_Pathogen_Count+1)
if(Student_Pathogen_Count>Number_Student_Pathogens){
Student_Pathogen_Count<-Number_Student_Pathogens
}
}
}
#Running Student Allergen Contamination based on Probability
Cont_Student_Allergen_YN<-ifelse(runif(1)<Pr_Student_Allergen,1,0)
#Self Assigned Contaminations
if(Toggle_SelfAssigned_Allergens==1){
if( k == Student_Allergen_Day[Student_Allergen_Count]
&& j == Student_Allergen_Service[Student_Allergen_Count]
&& z == Student_Allergen_No[Student_Allergen_Count]){
Cont_Student_Allergen_YN <- 1
#print("A student is contaminated with Allergens")
Student_Allergen_Count<-(Student_Allergen_Count+1)
if(Student_Allergen_Count>Number_Student_Allergens){
Student_Allergen_Count<-Number_Student_Allergens
}
}
}
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
View(Pre_Data.Frame)
View(Pre_Data)
View(Fr_Data.Frame)
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
View(Fr_Data.Frame)
View(Pre_Data)
func_mainloop_outs<-function(){
if (Sim_Fruit ==1 && Sim_PRE ==0 && Sim_PSS ==0){
Outputs_Student_Loop<-list(Fr_Data.Frame=Fr_Data.Frame) #Fruit on
} else if (Sim_Fruit ==0 && Sim_PRE ==1 && Sim_PSS ==0){
Outputs_Student_Loop<-list(Pre_Data.Frame=Pre_Data.Frame) #PRE on
} else if (Sim_Fruit ==0 && Sim_PRE ==0 && Sim_PSS ==1){
Outputs_Student_Loop<-list(Pss_Data.Frame=Pss_Data.Frame) #PSS on
} else if (Sim_Fruit ==1 && Sim_PRE ==1 && Sim_PSS ==0){
Outputs_Student_Loop<-list(Fr_Data.Frame=Fr_Data.Frame,Pre_Data.Frame=Pre_Data.Frame) #Fruit and PRE on
} else if (Sim_Fruit ==1 && Sim_PRE ==0 && Sim_PSS ==1){
Outputs_Student_Loop<-list(Fr_Data.Frame=Fr_Data.Frame,Pss_Data.Frame=Pss_Data.Frame) #Fruit and PSS on
} else if (Sim_Fruit ==0 && Sim_PRE ==1 && Sim_PSS ==1){
Outputs_Student_Loop<-list(Fr_Data.Frame=Fr_Data.Frame,Pss_Data.Frame=Pss_Data.Frame) #PRE and PSS on
} else if (Sim_Fruit ==1 && Sim_PRE ==1 && Sim_PSS ==1){
Outputs_Student_Loop<-list(Fr_Data.Frame=Fr_Data.Frame,Pss_Data.Frame=Pss_Data.Frame, Pre_Data.Frame = Pre_Data.Frame) #Fruit, PRE and PSS on
}
return (Outputs_Student_Loop)
}
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
setwd("~/Other Docs")
#!/usr/bin/env Rscript
# ABSTRACT: Create R plots
# PODNAME: create_plots.R
# Take the output files from the pan genome pipeline and create nice plots.
library(ggplot2)
mydata = read.table("ngene_presence_absence.Rtab")
boxplot(mydata, data=mydata, main="Number of new genes",
xlab="No. of genomes", ylab="No. of genes",varwidth=TRUE, ylim=c(0,max(mydata)), outline=FALSE)
mydata = read.table("gene_presence_absence.Rtab")
boxplot(mydata, data=mydata, main="Number of new genes",
xlab="No. of genomes", ylab="No. of genes",varwidth=TRUE, ylim=c(0,max(mydata)), outline=FALSE)
View(mydata)
View(mydata)
library(ggplot2)
conserved = colMeans(read.table("gene_presence_absence.Rtab"))
total = colMeans(read.table("gene_presence_absence.Rtab"))
genes = data.frame( genes_to_genomes = c(conserved,total),
genomes = c(c(1:length(conserved)),c(1:length(conserved))),
Key = c(rep("Conserved genes",length(conserved)), rep("Total genes",length(total))) )
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(total)))+
xlim(c(1,length(total)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16) +  theme(legend.justification=c(0,1),legend.position=c(0,1))#+
#ggsave(filename="conserved_vs_total_genes.png", scale=1)
genes = data.frame( genes_to_genomes = c(conserved,total),
genomes = c(c(1:length(conserved)),c(1:length(conserved))),
Key = c(rep("Conserved genes",length(conserved)), rep("Total genes",length(total))) )
conserved = colMeans(read.table("gene_presence_absence.Rtab"))
total = colMeans(read.table("gene_presence_absence.Rtab"))
data.frame("gene_presence_absence.Rtab")
read.table("gene_presence_absence.Rtab")
View(mydata)
View(mydata)
colnames(mydata) <- mydata[1,]
mydata <- mydata[-1, ]
View(mydata)
rownames(mydata) <- mydata[,1]
mydata <- mydata[,-1 ]
View(mydata)
conserved = colMeans(mydata)
total = colMeans(mydata)
str(mydata)
unique_genes = colMeans(mydata)
new_genes = colMeans(mydata)
setwd("~/Other Docs")
library(ggplot2)
conserved = colMeans(read.table("number_of_conserved_genes.Rtab"))
total = colMeans(read.table("number_of_genes_in_pan_genome.Rtab"))
genes = data.frame( genes_to_genomes = c(conserved,total),
genomes = c(c(1:length(conserved)),c(1:length(conserved))),
Key = c(rep("Conserved genes",length(conserved)), rep("Total genes",length(total))) )
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(total)))+
xlim(c(1,length(total)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16) +  theme(legend.justification=c(0,1),legend.position=c(0,1))+
ggsave(filename="conserved_vs_total_genes.png", scale=1)
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(total)))+
xlim(c(1,length(total)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16) +  theme(legend.justification=c(0,1),legend.position=c(0,1))+
ggsave(filename="conserved_vs_total_genes.png")
unique_genes = colMeans(read.table("number_of_unique_genes.Rtab"))
new_genes = colMeans(read.table("number_of_new_genes.Rtab"))
genes = data.frame( genes_to_genomes = c(unique_genes,new_genes),
genomes = c(c(1:length(unique_genes)),c(1:length(unique_genes))),
Key = c(rep("Unique genes",length(unique_genes)), rep("New genes",length(new_genes))) )
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(unique_genes)))+
xlim(c(1,length(unique_genes)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16) +  theme(legend.justification=c(1,1),legend.position=c(1,1))+
ggsave(filename="unique_vs_new_genes.png", scale=1)
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(unique_genes)))+
xlim(c(1,length(unique_genes)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16) +  theme(legend.justification=c(1,1),legend.position=c(1,1))+
ggsave(filename="unique_vs_new_genes.png", scale=1)
conserved = colMeans(read.table("number_of_conserved_genes.Rtab"))
total = colMeans(read.table("number_of_genes_in_pan_genome.Rtab"))
genes = data.frame( genes_to_genomes = c(conserved,total),
genomes = c(c(1:length(conserved)),c(1:length(conserved))),
Key = c(rep("Conserved genes",length(conserved)), rep("Total genes",length(total))) )
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(total)))+
xlim(c(1,length(total)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16) +  theme(legend.justification=c(0,1),legend.position=c(0,1))+
ggsave(filename="conserved_vs_total_genes.png")
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(unique_genes)))+
xlim(c(1,length(unique_genes)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16) +  theme(legend.justification=c(1,1),legend.position=c(1,1))
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(unique_genes)))+
xlim(c(1,length(unique_genes)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16)
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +
geom_line( color = "red")+
theme_classic() +
ylim(c(1,max(unique_genes)))+
xlim(c(1,length(unique_genes)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16)
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key, color = Key)) +
geom_line()+
theme_classic() +
ylim(c(1,max(unique_genes)))+
xlim(c(1,length(unique_genes)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16)
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key)) +geom_line()+
theme_classic() +
ylim(c(1,max(total)))+
xlim(c(1,length(total)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16)
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key, color = Key)) +
geom_line()+
theme_classic() +
ylim(c(1,max(total)))+
xlim(c(1,length(total)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16)
unique_genes = colMeans(read.table("number_of_unique_genes.Rtab"))
new_genes = colMeans(read.table("number_of_new_genes.Rtab"))
genes = data.frame( genes_to_genomes = c(unique_genes,new_genes),
genomes = c(c(1:length(unique_genes)),c(1:length(unique_genes))),
Key = c(rep("Unique genes",length(unique_genes)), rep("New genes",length(new_genes))) )
ggplot(data = genes, aes(x = genomes, y = genes_to_genomes, group = Key, linetype=Key, color = Key)) +
geom_line()+
theme_classic() +
ylim(c(1,max(unique_genes)))+
xlim(c(1,length(unique_genes)))+
xlab("No. of genomes") +
ylab("No. of genes")+ theme_bw(base_size = 16)
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
Func_Time_Temp<-function(DF, Item_Picked, Temp):
Time<- runif(1,10,15) #Time between 10 and 15 minutes.
#Parameters for milk spoilage
b<-.03772
Tmin<-(-6.1)
Tmax<-(41.2)
c<-.1719
k<-(b*(Temp-Tmin)*(1-exp(c*(Temp-Tmax))))^2
#How much growth
Growth<-TimeVar*k
#N current contamination
N<-DF[Item_Picked,colnames(DF)== "SpoilageCon"]
Con_Final<-N + Growth #Growth in log.
#Refreshing the contamination in the RoW
DF[Item_Picked,colnames(DF)== "SpoilageCon"]<-as.numeric(Con_Final)
#Adding time to the Dataframe?
DF[Item_Picked,colnames(DF)== "Location"]<-"Tray"
Func_Time_Temp<-function(DF, Item_Picked, Temp):
Time<- runif(1,10,15) #Time between 10 and 15 minutes.
#Parameters for milk spoilage
b<-.03772
Tmin<-(-6.1)
Tmax<-(41.2)
c<-.1719
k<-(b*(Temp-Tmin)*(1-exp(c*(Temp-Tmax))))^2
#How much growth
Growth<-TimeVar*k
#N current contamination
N<-DF[Item_Picked,colnames(DF)== "SpoilageCon"]
Con_Final<-N + Growth #Growth in log.
#Refreshing the contamination in the RoW
DF[Item_Picked,colnames(DF)== "SpoilageCon"]<-as.numeric(Con_Final)
#Adding time to the Dataframe?
DF[Item_Picked,colnames(DF)== "Location"]<-"Tray"
Func_Time_Temp<-function(DF, Item_Picked, Temp){
Time<- runif(1,10,15) #Time between 10 and 15 minutes.
#Parameters for milk spoilage
b<-.03772
Tmin<-(-6.1)
Tmax<-(41.2)
c<-.1719
k<-(b*(Temp-Tmin)*(1-exp(c*(Temp-Tmax))))^2
#How much growth
Growth<-TimeVar*k
#N current contamination
N<-DF[Item_Picked,colnames(DF)== "SpoilageCon"]
Con_Final<-N + Growth #Growth in log.
#Refreshing the contamination in the RoW
DF[Item_Picked,colnames(DF)== "SpoilageCon"]<-as.numeric(Con_Final)
#Adding time to the Dataframe?
DF[Item_Picked,colnames(DF)== "Location"]<-"Tray"
}
Func_Time_Temp(DF = Pre_Data.Frame, Item_Picked = 2,Temp = 25)
Func_Time_Temp<-function(DF, Item_Picked, Temp){
Time<- runif(1,10,15) #Time between 10 and 15 minutes.
#Parameters for milk spoilage
b<-.03772
Tmin<-(-6.1)
Tmax<-(41.2)
c<-.1719
k<-(b*(Temp-Tmin)*(1-exp(c*(Temp-Tmax))))^2
#How much growth
Growth<-Time*k
#N current contamination
N<-DF[Item_Picked,colnames(DF)== "SpoilageCon"]
Con_Final<-N + Growth #Growth in log.
#Refreshing the contamination in the RoW
DF[Item_Picked,colnames(DF)== "SpoilageCon"]<-as.numeric(Con_Final)
#Adding time to the Dataframe?
DF[Item_Picked,colnames(DF)== "Location"]<-"Tray"
}
Func_Time_Temp(DF = Pre_Data.Frame, Item_Picked = 2,Temp = 25)''
Func_Time_Temp(DF = Pre_Data.Frame, Item_Picked = 2,Temp = 25)
DF8<-Func_Time_Temp(DF = Pre_Data.Frame, Item_Picked = 2,Temp = 25)
Func_Time_Temp<-function(DF, Item_Picked, Temp){
Time<- runif(1,10,15) #Time between 10 and 15 minutes.
#Parameters for milk spoilage
b<-.03772
Tmin<-(-6.1)
Tmax<-(41.2)
c<-.1719
k<-(b*(Temp-Tmin)*(1-exp(c*(Temp-Tmax))))^2
#How much growth
Growth<-Time*k
#N current contamination
N<-DF[Item_Picked,colnames(DF)== "SpoilageCon"]
Con_Final<-N + Growth #Growth in log.
#Refreshing the contamination in the RoW
DF[Item_Picked,colnames(DF)== "SpoilageCon"]<-as.numeric(Con_Final)
#Adding time to the Dataframe?
DF[Item_Picked,colnames(DF)== "Location"]<-"Tray"
return(DF)
}
#Funct
DF8<-Func_Time_Temp(DF = Pre_Data.Frame, Item_Picked = 2,Temp = 25)
View(DF8)
Func_Time_Temp<-function(DF, Item_Picked, Temp){
Time<- runif(1,10,15) #Time between 10 and 15 minutes.
print(Time)
#Parameters for milk spoilage
b<-.03772
Tmin<-(-6.1)
Tmax<-(41.2)
c<-.1719
k<-(b*(Temp-Tmin)*(1-exp(c*(Temp-Tmax))))^2
print(k)
#How much growth
Growth<-Time*k
#N current contamination
N<-DF[Item_Picked,colnames(DF)== "SpoilageCon"]
Con_Final<-N + Growth #Growth in log.
#Refreshing the contamination in the RoW
DF[Item_Picked,colnames(DF)== "SpoilageCon"]<-as.numeric(Con_Final)
#Adding time to the Dataframe?
DF[Item_Picked,colnames(DF)== "Location"]<-"Tray"
return(DF)
}
#Funct
DF8<-Func_Time_Temp(DF = Pre_Data.Frame, Item_Picked = 2,Temp = 25)
View(DF8)
#Funct
DF8<-Func_Time_Temp(DF = Pre_Data.Frame, Item_Picked = 2,Temp = 25)
Func_Time_Temp<-function(DF, Item_Picked, Temp){
Time<- runif(1,(10/60),(15/60)) #Time between 10 and 15 minutes.
print(Time)
#Parameters for milk spoilage
b<-.03772
Tmin<-(-6.1)
Tmax<-(41.2)
c<-.1719
k<-(b*(Temp-Tmin)*(1-exp(c*(Temp-Tmax))))^2
#How much growth
Growth<-Time*k
print(Growth)
#N current contamination
N<-DF[Item_Picked,colnames(DF)== "SpoilageCon"]
Con_Final<-N + Growth #Growth in log.
#Refreshing the contamination in the RoW
DF[Item_Picked,colnames(DF)== "SpoilageCon"]<-as.numeric(Con_Final)
#Adding time to the Dataframe?
DF[Item_Picked,colnames(DF)== "Location"]<-"Tray"
return(DF)
}
#Funct
DF8<-Func_Time_Temp(DF = Pre_Data.Frame, Item_Picked = 2,Temp = 25)
View(DF8)
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
DF_Washed_Vecs<- data.frame(VectorLeft_Before, VectorLeft_After)
DF_Washed_Vecs_0<-DF_Washed_Vecs %>%
filter(VectorLeft_Before>0)
View(Pre_Data)
