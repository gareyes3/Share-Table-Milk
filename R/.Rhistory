AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*(Service_Length+TurningT_Length)
AnalysysDF$Shared<-ifelse(AnalysysDF$STtimes>0, "Yes", "No")
final_list<-append(final_list,list(AnalysysDF))
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
}
return(final_list)
}
source("Input_Static.R")
Outs_DFs_4s3b<-Obtaining_Spoiled_Milks_DFs(N_Years = 50, Service_Length = 50,TurningT_Length = 7)
source("Input_Static.R")
Outs_DFs_1sb0<-Obtaining_Spoiled_Milks_DFs(N_Years = 50, Service_Length = 40,TurningT_Length = 0)
save.image("C:/Users/Gustavo Reyes/Box/Share Table Project/Milk Spoilage Model Docs/Spoilage Rdata Corea et al/New Data/4s3b-617 (newest).RData")
save.image("C:/Users/Gustavo Reyes/Box/Share Table Project/Milk Spoilage Model Docs/Spoilage Rdata Corea et al/New Data/4s3b-1sb0-618 (newest).RData")
#Setting Working Directory-------------------------------------
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
library(tidyverse)
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
load("C:/Users/Gustavo Reyes/Box/Share Table Project/Milk Spoilage Model Docs/Spoilage Rdata Corea et al/New Data/5s4b-2sb1-618 (newest).RData")
load("C:/Users/Gustavo Reyes/Box/Share Table Project/Milk Spoilage Model Docs/Spoilage Rdata Corea et al/Final Data/4s3b-1sb0-618 (newest).RData")
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
s54b_List<-list()
Output_Milk_s54b<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Df_RT_MT_s5b4, Interval =1/60,AF = 1.32)
Changes_Over_Time_s54b<-Output_Milk_s54b[[2]]
for (i in 1:50){
AnalysysDF_s54b<- Appling_Changes(df = Outs_DFs_5s4b[[i]], Changes_Over_Time = Changes_Over_Time_s54b)
s54b_List<-append(s54b_List,list(AnalysysDF_s54b))
}
s54b_List_per_spoiled<-list()
for (i in 1:50){
s54b_List_per_spoiled<-append(s54b_List_per_spoiled,list(summary_per_spoiled(s54b_List[[i]])))
}
Total_Milks_Spoiled_s54b<-Extracting_Total_SpoiledMilks(Output_Name = s54b_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s54b
mean(Total_Milks_Spoiled_s54b)
range (Total_Milks_Spoiled_s54b)
#Range of milks per year
s54b_List_total_milks<-c()
for (i in 1:50){
s54b_List_total_milks<-c(s54b_List_total_milks,length(s54b_List[[i]]$ID))
}
mean(s54b_List_total_milks)
range(s54b_List_total_milks)
#Percentage of spoiled milks per year
s54b_List_pecentage_spoiled<-c()
for (i in 1:50){
s54b_List_pecentage_spoiled<-c(s54b_List_pecentage_spoiled,(sum(s54b_List[[i]]$SpoilageCon>6)/length(s54b_List[[i]]$SpoilageCon)))
}
mean(s54b_List_pecentage_spoiled)
range (s54b_List_pecentage_spoiled)
#Population Summary
s54b_List_population<-c()
for (i in 1:50){
s54b_List_population<-c(s54b_List_population,s54b_List[[i]]$SpoilageCon)
}
mean(s54b_List_population) #CFU/mL
range (s54b_List_population)
#Time in System
s54b_List_Time<-c()
for (i in 1:50){
s54b_List_Time<-c(s54b_List_Time,s54b_List[[i]]$TotTime)
}
mean(s54b_List_Time) #CFU/mL
range (s54b_List_Time)
s43b_List<-list()
Output_Milk_s43b<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Df_RT_MT_s4b3, Interval =1/60,AF = 1.32)
Changes_Over_Time_s43b<-Output_Milk_s43b[[2]]
for (i in 1:50){
AnalysysDF_s43b<- Appling_Changes(df = Outs_DFs_4s3b[[i]], Changes_Over_Time = Changes_Over_Time_s43b)
s43b_List<-append(s43b_List,list(AnalysysDF_s43b))
}
s43b_List_per_spoiled<-list()
for (i in 1:50){
s43b_List_per_spoiled<-append(s43b_List_per_spoiled,list(summary_per_spoiled(s43b_List[[i]])))
}
Total_Milks_Spoiled_s43b<-Extracting_Total_SpoiledMilks(Output_Name = s43b_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s43b
mean(Total_Milks_Spoiled_s43b)
range (Total_Milks_Spoiled_s43b)
Total_Milks_Spoiled_s43b
mean(Total_Milks_Spoiled_s43b)
range (Total_Milks_Spoiled_s43b)
#Range of milks per year
s43b_List_total_milks<-c()
for (i in 1:50){
s43b_List_total_milks<-c(s43b_List_total_milks,length(s43b_List[[i]]$ID))
}
mean(s43b_List_total_milks)
range(s43b_List_total_milks)
#Percentage of spoiled milks per year
s43b_List_pecentage_spoiled<-c()
for (i in 1:50){
s43b_List_pecentage_spoiled<-c(s43b_List_pecentage_spoiled,(sum(s43b_List[[i]]$SpoilageCon>6)/length(s43b_List[[i]]$SpoilageCon)))
}
mean(s43b_List_pecentage_spoiled)
range (s43b_List_pecentage_spoiled)
#Percentage of spoiled milks per year
s43b_List_pecentage_spoiled<-c()
for (i in 1:50){
s43b_List_pecentage_spoiled<-c(s43b_List_pecentage_spoiled,(sum(s43b_List[[i]]$SpoilageCon>6)/length(s43b_List[[i]]$SpoilageCon)))
}
mean(s43b_List_pecentage_spoiled)
range (s43b_List_pecentage_spoiled)
mean(s43b_List_pecentage_spoiled)
range (s43b_List_pecentage_spoiled)
#Population Summary
s43b_List_population<-c()
for (i in 1:50){
s43b_List_population<-c(s43b_List_population,s43b_List[[i]]$SpoilageCon)
}
mean(s43b_List_population) #CFU/mL
range (s43b_List_population)
#Time in System
s43b_List_Time<-c()
for (i in 1:50){
s43b_List_Time<-c(s43b_List_Time,s43b_List[[i]]$TotTime)
}
mean(s43b_List_Time) #CFU/mL
range (s43b_List_Time)
s1b0_List<-list()
Output_Milk_s1b0<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Df_RT_MT_s4b3, Interval =1/60,AF = 1.32)
Changes_Over_Time_s1b0<-Output_Milk_s1b0[[2]]
for (i in 1:50){
AnalysysDF_s1b0<- Appling_Changes(df = Outs_DFs_1sb0[[i]], Changes_Over_Time = Changes_Over_Time_s1b0)
s1b0_List<-append(s1b0_List,list(AnalysysDF_s1b0))
}
s1b0_List_per_spoiled<-list()
for (i in 1:50){
s1b0_List_per_spoiled<-append(s1b0_List_per_spoiled,list(summary_per_spoiled(s1b0_List[[i]])))
}
Total_Milks_Spoiled_s1b0<-Extracting_Total_SpoiledMilks(Output_Name = s1b0_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s1b0
mean(Total_Milks_Spoiled_s1b0)
range (Total_Milks_Spoiled_s1b0)
#Range of milks per year
s1b0_List_total_milks<-c()
for (i in 1:50){
s1b0_List_total_milks<-c(s1b0_List_total_milks,length(s1b0_List[[i]]$ID))
}
mean(s1b0_List_total_milks)
range(s1b0_List_total_milks)
#Range of milks per year
s1b0_List_total_milks<-c()
for (i in 1:50){
s1b0_List_total_milks<-c(s1b0_List_total_milks,length(s1b0_List[[i]]$ID))
}
mean(s1b0_List_total_milks)
range(s1b0_List_total_milks)
#Percentage of spoiled milks per year
s1b0_List_pecentage_spoiled<-c()
for (i in 1:50){
s1b0_List_pecentage_spoiled<-c(s1b0_List_pecentage_spoiled,(sum(s1b0_List[[i]]$SpoilageCon>6)/length(s1b0_List[[i]]$SpoilageCon)))
}
mean(s1b0_List_pecentage_spoiled)
range (s1b0_List_pecentage_spoiled)
#Population Summary
s1b0_List_population<-c()
for (i in 1:50){
s1b0_List_population<-c(s1b0_List_population,s1b0_List[[i]]$SpoilageCon)
}
mean(s1b0_List_population) #CFU/mL
range (s1b0_List_population)
#Time in System
s1b0_List_Time<-c()
for (i in 1:50){
s1b0_List_Time<-c(s1b0_List_Time,s1b0_List[[i]]$TotTime)
}
mean(s1b0_List_Time) #CFU/mL
range (s1b0_List_Time)
#Range of milks per year
s1b0_List_total_milks<-c()
for (i in 1:50){
s1b0_List_total_milks<-c(s1b0_List_total_milks,length(s1b0_List[[i]]$ID))
}
mean(s1b0_List_total_milks)
range(s1b0_List_total_milks)
s2b1_List<-list()
Output_Milk_s2b1<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Df_RT_MT_s4b3, Interval =1/60,AF = 1.32)
Changes_Over_Time_s2b1<-Output_Milk_s2b1[[2]]
for (i in 1:50){
AnalysysDF_s2b1<- Appling_Changes(df = Outs_DFs_2sb1[[i]], Changes_Over_Time = Changes_Over_Time_s2b1)
s2b1_List<-append(s2b1_List,list(AnalysysDF_s2b1))
}
s2b1_List_per_spoiled<-list()
for (i in 1:50){
s2b1_List_per_spoiled<-append(s2b1_List_per_spoiled,list(summary_per_spoiled(s2b1_List[[i]])))
}
Total_Milks_Spoiled_s2b1<-Extracting_Total_SpoiledMilks(Output_Name = s2b1_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s2b1
mean(Total_Milks_Spoiled_s2b1)
range (Total_Milks_Spoiled_s2b1)
#Range of milks per year
s2b1_List_total_milks<-c()
for (i in 1:50){
s2b1_List_total_milks<-c(s2b1_List_total_milks,length(s2b1_List[[i]]$ID))
}
mean(s2b1_List_total_milks)
range(s2b1_List_total_milks)
s1b0_List<-list()
Output_Milk_s1b0<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Df_RT_MT_s1b0, Interval =1/60,AF = 1.32)
Changes_Over_Time_s1b0<-Output_Milk_s1b0[[2]]
for (i in 1:50){
AnalysysDF_s1b0<- Appling_Changes(df = Outs_DFs_1sb0[[i]], Changes_Over_Time = Changes_Over_Time_s1b0)
s1b0_List<-append(s1b0_List,list(AnalysysDF_s1b0))
}
s2b1_List<-list()
Output_Milk_s2b1<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Df_RT_MT_s2b1, Interval =1/60,AF = 1.32)
Changes_Over_Time_s2b1<-Output_Milk_s2b1[[2]]
for (i in 1:50){
AnalysysDF_s2b1<- Appling_Changes(df = Outs_DFs_2sb1[[i]], Changes_Over_Time = Changes_Over_Time_s2b1)
s2b1_List<-append(s2b1_List,list(AnalysysDF_s2b1))
}
s2b1_List_per_spoiled<-list()
for (i in 1:50){
s2b1_List_per_spoiled<-append(s2b1_List_per_spoiled,list(summary_per_spoiled(s2b1_List[[i]])))
}
Total_Milks_Spoiled_s2b1<-Extracting_Total_SpoiledMilks(Output_Name = s2b1_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s2b1
mean(Total_Milks_Spoiled_s2b1)
range (Total_Milks_Spoiled_s2b1)
#Range of milks per year
s2b1_List_total_milks<-c()
for (i in 1:50){
s2b1_List_total_milks<-c(s2b1_List_total_milks,length(s2b1_List[[i]]$ID))
}
mean(s2b1_List_total_milks)
range(s2b1_List_total_milks)
#Percentage of spoiled milks per year
s2b1_List_pecentage_spoiled<-c()
for (i in 1:50){
s2b1_List_pecentage_spoiled<-c(s2b1_List_pecentage_spoiled,(sum(s2b1_List[[i]]$SpoilageCon>6)/length(s2b1_List[[i]]$SpoilageCon)))
}
mean(s2b1_List_pecentage_spoiled)
range (s2b1_List_pecentage_spoiled)
#Population Summary
s2b1_List_population<-c()
for (i in 1:50){
s2b1_List_population<-c(s2b1_List_population,s2b1_List[[i]]$SpoilageCon)
}
mean(s2b1_List_population) #CFU/mL
range (s2b1_List_population)
s1b0_List_per_spoiled<-list()
for (i in 1:50){
s1b0_List_per_spoiled<-append(s1b0_List_per_spoiled,list(summary_per_spoiled(s1b0_List[[i]])))
}
Total_Milks_Spoiled_s1b0<-Extracting_Total_SpoiledMilks(Output_Name = s1b0_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s1b0
mean(Total_Milks_Spoiled_s1b0)
range (Total_Milks_Spoiled_s1b0)
#Range of milks per year
s1b0_List_total_milks<-c()
for (i in 1:50){
s1b0_List_total_milks<-c(s1b0_List_total_milks,length(s1b0_List[[i]]$ID))
}
mean(s1b0_List_total_milks)
range(s1b0_List_total_milks)
library(tidyverse)
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Function for growth and lag phase
new_growth_rate<-function(newTemp, oldMu,oldTemp = 6, T0 = -4.15){
newMu<-((newTemp-T0)/(oldTemp-T0))* oldMu
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 6, T0 = -4.15) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"= rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval, AF){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$MilkTemp[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$MilkTemp[i], oldMu = old_mumax))/2.303)* AF#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60, AF){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval, AF=AF)
Lag_Consumed = Output_Milk[[2]]
Cont<-Output_Milk[[1]]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (list(Cont,Output_Milk[[3]]))
}
#Applying Changes over time with N max limit
Appling_Changes<-function(df,Changes_Over_Time){
NMax = 8.14
Contamination_v<-df$InSpoilageCon
Time_V<-df$TotTime
Final_contamination_v<-c()
for (i in 1:nrow(df)){
In_Cont<-Contamination_v[i]
Time<-Time_V[i]
if (Time == 0){
Total_Growth = 0
}else{
Total_Growth<-Changes_Over_Time[Time]
}
Final_Con<-In_Cont+Total_Growth
if(Final_Con>NMax){
Final_Con <- NMax
}
Final_contamination_v<-c(Final_contamination_v,Final_Con)
}
df$SpoilageCon<-Final_contamination_v
return(df)
}
#Total Time
summary_Times<-function(df){
a<-df %>%
#filter(Shared == "No") %>%
group_by(Shared) %>%
dplyr::summarize(All_time=median(TotTime), Alltime_q25 = quantile(TotTime, 0.025), Alltime_q975 = quantile(TotTime, 0.975))
b<-df %>%
#filter(Shared == "No") %>%
group_by(NULL) %>%
dplyr::summarize(All_time=median(TotTime), Alltime_q25 = quantile(TotTime, 0.025), Alltime_q975 = quantile(TotTime, 0.975)) %>%
mutate(Shared = "All") %>%
select(Shared,All_time,Alltime_q25,Alltime_q975)
return(rbind(a,b))
}
summary_location_per<-function(df){
a<-df %>%
group_by(Location) %>%
dplyr::summarize(count = n(),
Day_1 = sum(TotTime<1440)/count,
Day_2 = sum(TotTime>1440 & TotTime<1440*2)/count,
Day_3 = sum(TotTime>1440*2 & TotTime<1440*3)/count,
Day_4 = sum(TotTime>1440*3 & TotTime<1440*4)/count,
Day_5 = sum(TotTime>1440*4 & TotTime<1440*5)/count
)
return (a)
}
summary_per_spoiled<-function(df){
#Spoiled Milks
a<-df %>%
#filter(Shared == "Yes") %>%
group_by(Shared) %>%
dplyr::summarize(All_Total_Spoiled = sum(SpoilageCon>6), percentage = (sum(SpoilageCon>6)/n()))
b<-df %>%
#filter(Shared == "Yes") %>%
group_by(NULL) %>%
dplyr::summarize(All_Total_Spoiled = sum(SpoilageCon>6), percentage = (sum(SpoilageCon>6)/n())) %>%
mutate(Shared = "All") %>%
select(Shared,All_Total_Spoiled,percentage)
return(rbind(a,b))
}
summary_pop_change<-function(df){
#Population Change
#Population Change
a<-df %>%
#filter(Shared == "Yes") %>%
group_by(Shared) %>%
dplyr::summarize(PopC_All_Med = median(SpoilageCon - InSpoilageCon), PopC_All_q25 = quantile(SpoilageCon - InSpoilageCon, 0.025), PopC_All_q975 = quantile(SpoilageCon - InSpoilageCon, 0.975))
b<-df %>%
#filter(Shared == "Yes") %>%
group_by(NULL) %>%
dplyr::summarize(PopC_All_Med = median(SpoilageCon - InSpoilageCon), PopC_All_q25 = quantile(SpoilageCon - InSpoilageCon, 0.025), PopC_All_q975 = quantile(SpoilageCon - InSpoilageCon, 0.975)) %>%
mutate(Shared = "All") %>%
select(Shared,PopC_All_Med,PopC_All_q25,PopC_All_q975)
return(rbind(a,b))
}
Obtaining_Spoiled_Milks_DFs<-function(N_Years, Service_Length,TurningT_Length){
final_list <- list()
#Define the length of periods to match your model to properly adjust time.
Service_Length = Service_Length#50
TurningT_Length = TurningT_Length#25
for (i in 1:N_Years){
print(i)
start_time<-Sys.time()
source("Main_Loops2.R")
#1. Start from here
Individual_Analysis_Milk<-rbind.fill(List_Sens_Pre)
#2. find the duplicates
#this step filters replicated based on the ID
Individual_Analysis_Milk<-Individual_Analysis_Milk %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Milk
#Adding the time of the services for those milks that were added to the service line during the lunch period.
AnalysysDF[AnalysysDF$Initial.Service>1,]
AnalysysDF$TotTime<-AnalysysDF$TotTime+(as.integer(AnalysysDF$Initial.Service)-1)*(Service_Length+TurningT_Length)
AnalysysDF$Shared<-ifelse(AnalysysDF$STtimes>0, "Yes", "No")
final_list<-append(final_list,list(AnalysysDF))
end_time<-Sys.time()
Total_time<-end_time-start_time
print(Total_time)
}
return(final_list)
}
source("Input_Static.R")
Outs_DFs_1sb0<-Obtaining_Spoiled_Milks_DFs(N_Years = 50, Service_Length = 40,TurningT_Length = 0)
s1b0_List<-list()
Output_Milk_s1b0<-Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Df_RT_MT_s1b0, Interval =1/60,AF = 1.32)
Changes_Over_Time_s1b0<-Output_Milk_s1b0[[2]]
for (i in 1:50){
AnalysysDF_s1b0<- Appling_Changes(df = Outs_DFs_1sb0[[i]], Changes_Over_Time = Changes_Over_Time_s1b0)
s1b0_List<-append(s1b0_List,list(AnalysysDF_s1b0))
}
s1b0_List_per_spoiled<-list()
for (i in 1:50){
s1b0_List_per_spoiled<-append(s1b0_List_per_spoiled,list(summary_per_spoiled(s1b0_List[[i]])))
}
Total_Milks_Spoiled_s1b0<-Extracting_Total_SpoiledMilks(Output_Name = s1b0_List_per_spoiled, N_Years = 50)
Total_Milks_Spoiled_s1b0
mean(Total_Milks_Spoiled_s1b0)
range (Total_Milks_Spoiled_s1b0)
#Range of milks per year
s1b0_List_total_milks<-c()
for (i in 1:50){
s1b0_List_total_milks<-c(s1b0_List_total_milks,length(s1b0_List[[i]]$ID))
}
mean(s1b0_List_total_milks)
mean(Total_Milks_Spoiled_s1b0)
range (Total_Milks_Spoiled_s1b0)
#Range of milks per year
s1b0_List_total_milks<-c()
for (i in 1:50){
s1b0_List_total_milks<-c(s1b0_List_total_milks,length(s1b0_List[[i]]$ID))
}
mean(s1b0_List_total_milks)
range(s1b0_List_total_milks)
#Percentage of spoiled milks per year
s1b0_List_pecentage_spoiled<-c()
for (i in 1:50){
s1b0_List_pecentage_spoiled<-c(s1b0_List_pecentage_spoiled,(sum(s1b0_List[[i]]$SpoilageCon>6)/length(s1b0_List[[i]]$SpoilageCon)))
}
mean(s1b0_List_pecentage_spoiled)
range (s1b0_List_pecentage_spoiled)
mean(s1b0_List_pecentage_spoiled)
range (s1b0_List_pecentage_spoiled)
#Population Summary
s1b0_List_population<-c()
for (i in 1:50){
s1b0_List_population<-c(s1b0_List_population,s1b0_List[[i]]$SpoilageCon)
}
mean(s1b0_List_population) #CFU/mL
range (s1b0_List_population)
#Time in System
s1b0_List_Time<-c()
for (i in 1:50){
s1b0_List_Time<-c(s1b0_List_Time,s1b0_List[[i]]$TotTime)
}
mean(s1b0_List_Time) #CFU/mL
range (s1b0_List_Time)
save.image("C:/Users/Gustavo Reyes/Box/Share Table Project/Milk Spoilage Model Docs/Spoilage Rdata Corea et al/Final Data/All Lunch Service Scenarios (newest).RData")
