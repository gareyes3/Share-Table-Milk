"ST_Condition"= c())
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 120*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Time_Temp_Df<-Time_Temp_Df[1:7196,]
Time_Temp_Df$Type = "Refrigerated Control"
Spoil_RC = Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Spoil_RC[[1]]
Collection_df<-data.frame("Initial" = c(),
"Refrigerated_Control" = c(),
"ST_Condition"= c())
Initial_Conts<-rtruncnorm(n = length(Milkdf$SpoilageCon),b = 3, mean =0.3817872, sd=1.108859)
Collection_df$Initial<-Initial_Conts
Collection_df<-data.frame("Initial" = c(),
"Refrigerated_Control" = c(),
"ST_Condition"= c())
Initial_Conts<-rtruncnorm(n = length(Milkdf$SpoilageCon),b = 3, mean =0.3817872, sd=1.108859)
Collection_df$Initial<-Initial_Conts
Collection_df<-data.frame("Initial" = seq(1001),
"Refrigerated_Control" =seq(1001),
"ST_Condition"= seq(1001),)
Collection_df<-data.frame("Initial" = 1:1001,
"Refrigerated_Control" =1:1001,
"ST_Condition"= 1:1001)
Initial_Conts<-rtruncnorm(n = length(Milkdf$SpoilageCon),b = 3, mean =0.3817872, sd=1.108859)
Collection_df$Initial<-Initial_Conts
#ST Condition
Milkdf<-data.frame("MilkID" = seq(0,1000),"SpoilageCon" =NA, "LagCon" = 0)
Milkdf$SpoilageCon<-Initial_Conts
hist(Milkdf$SpoilageCon)
Milkdf$InSpoilageCon<-Milkdf$SpoilageCon
for(i in 1:nrow(Milkdf)){
Output_Milk<-Spoilage_Function_Single_Milk(Cont = Milkdf$SpoilageCon[i], Pop_Max =8.14, Time_Temp_df = Spoilage_Data, Interval =1/60)
#Milkdf$LagCon[i]<-Output_Milk[[2]]
Milkdf$SpoilageCon[i]<-Output_Milk[[1]]
}
#Collecting in the DF
Collection_df$ST_Condition<- Milkdf$SpoilageCon
#Refrigerated Control
Milkdf<-data.frame("MilkID" = seq(0,1000),"SpoilageCon" =NA, "LagCon" = 0)
Milkdf$SpoilageCon<-Initial_Conts
hist(Milkdf$SpoilageCon)
Milkdf$InSpoilageCon<-Milkdf$SpoilageCon
for(i in 1:nrow(Milkdf)){
Output_Milk<-Spoilage_Function_Single_Milk(Cont = Milkdf$SpoilageCon[i], Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
#Milkdf$LagCon[i]<-Output_Milk[[2]]
Milkdf$SpoilageCon[i]<-Output_Milk[[1]]
}
#Collecting in the DF
Collection_df$Refrigerated_Control<- Milkdf$SpoilageCon
View(Collection_df)
library(tidyverse)
library(ExtDist)
library(jmuOutlier)
library(truncnorm)
library(reshape2)
melt(Collection_df)
ggplot(aes(x = value, color =variable), data = Collection_df_Melted)+
geom_density()+
geom_vline(xintercept = 6, color = "red")
Collection_df_Melted<-melt(Collection_df)
ggplot(aes(x = value, color =variable), data = Collection_df_Melted)+
geom_density()+
geom_vline(xintercept = 6, color = "red")
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density()+
geom_vline(xintercept = 6, color = "red")
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red")
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red")+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red")+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))+
scale_fill_manual(name = "Car")
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red")+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))+
scale_fill_manual()
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red")+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red", size = 1)+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red", size = 1)+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))+
geom_text(aes(2000,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red", size = 1)+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))+
geom_text(aes(3,5.8,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red", size = 1)+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))+
geom_text(aes(3,0.4,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red", size = 1)+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))+
geom_text(aes(3.2,0.4,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red", size = 1)+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))+
geom_text(aes(3.5,0.4,label = "Quality Threshold = 6.0"), color = "black", size  = 4)
ggsave(filename = "Comparison")
ggsave(filename = "Comparison", width = 10,height = 8, units = "in", dpi = 300)
ggsave(filename = "Comparison.jpeg", width = 10,height = 8, units = "in", dpi = 300)
ggplot(aes(x = value, fill =variable), data = Collection_df_Melted)+
geom_density( alpha = 0.5)+
geom_vline(xintercept = 6, color = "red", size = 1)+
labs(y = "Percentage" ,x = expression("Average log"[10]~"CFU/ml"))+
geom_text(aes(3.5,0.4,label = "Quality Threshold = 6.0"), color = "black", size  = 4)+
theme_bw()
ggsave(filename = "Comparison.jpeg", width = 8,height = 6, units = "in", dpi = 300)
Collection_df_Melted
Collection_df_Melted %>%
group_by(variable) %>%
summarise(Per_Spoiled = value>6)
Collection_df_Melted %>%
group_by(variable) %>%
summarise(Per_Spoiled = sum(value>6))
Collection_df_Melted %>%
group_by(variable) %>%
summarise(Per_Spoiled = sum(value>6)/1001)
sd(c(1,2,3))
Collection_df_Melted %>%
group_by(variable) %>%
summarise(Per_Spoiled = sum(value>6)/1001, mean = mean(value), sd = sd(value))
Spoilage_Data
library(tidyverse)
install.packages("vctrs")
install.packages("vctrs")
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
library(tidyverse)
library(reshape2)
Unc_Conts<-read_csv("Data/Water_Testing_Analysis_R4.csv")
library(tidyverse)
library(reshape2)
Unc_Conts<-read_csv("Data/Water_Testing_Analysis_R4.csv")
library(tidyverse)
library(reshape2)
library(tidyverse)
library(reshape2)
Unc_Conts<-read_csv("Data/Water_Testing_Analysis_R4.csv")
library(readr)
Unc_Conts<-read_csv("Data/Water_Testing_Analysis_R4.csv")
Unc_Conts<-Unc_Conts %>%
select(-...1) %>%
mutate(N10Lsamples= as.factor(N10Lsamples)) %>%
group_by(N10Lsamples, Conts) %>%
summarise(median = median(PDetect), q05 = quantile(PDetect, 0.05), q95 = quantile(PDetect, 0.95))
library(tidyverse)
update.packages("tidyverse")
install.packages(c("bayesplot", "BH", "bit", "brms", "Brobdingnag", "bslib", "cachem", "callr", "car", "cli", "colorspace", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "DBI", "desc", "DescTools", "deSolve", "digest", "distributional", "dplyr", "DT", "dtwclust", "e1071", "evaluate", "expm", "ExtDist", "fansi", "farver", "fastmap", "fontawesome", "fs", "future", "future.apply", "gam", "gargle", "generics", "ggeffects", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gld", "glmnet", "globals", "gower", "gsl", "gtable", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "ISLR2", "isoband", "knitr", "lava", "listenv", "lme4", "maptools", "markdown", "MatrixModels", "matrixStats", "mc2d", "minqa", "nleqslv", "numbers", "openssl", "packrat", "parallelly", "pbkrtest", "pkgbuild", "pkgload", "plyr", "posterior", "processx", "progressr", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rmarkdown", "rstan", "rstatix", "sass", "scales", "shiny", "sourcetools", "sp", "stringi", "svglite", "sys", "testthat", "tibble", "timeDate", "tinytex", "tree", "utf8", "viridisLite", "xfun", "xts", "yaml", "zoo"))
install.packages(c("bayesplot", "BH", "bit", "brms", "Brobdingnag", "bslib", "cachem", "callr", "car", "cli", "colorspace", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "DBI", "desc", "DescTools", "deSolve", "digest", "distributional", "dplyr", "DT", "dtwclust", "e1071", "evaluate", "expm", "ExtDist", "fansi", "farver", "fastmap", "fontawesome", "fs", "future", "future.apply", "gam", "gargle", "generics", "ggeffects", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gld", "glmnet", "globals", "gower", "gsl", "gtable", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "ISLR2", "isoband", "knitr", "lava", "listenv", "lme4", "maptools", "markdown", "MatrixModels", "matrixStats", "mc2d", "minqa", "nleqslv", "numbers", "openssl", "packrat", "parallelly", "pbkrtest", "pkgbuild", "pkgload", "plyr", "posterior", "processx", "progressr", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rmarkdown", "rstan", "rstatix", "sass", "scales", "shiny", "sourcetools", "sp", "stringi", "svglite", "sys", "testthat", "tibble", "timeDate", "tinytex", "tree", "utf8", "viridisLite", "xfun", "xts", "yaml", "zoo"))
install.packages(c("bayesplot", "BH", "bit", "brms", "Brobdingnag", "bslib", "cachem", "callr", "car", "cli", "colorspace", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "DBI", "desc", "DescTools", "deSolve", "digest", "distributional", "dplyr", "DT", "dtwclust", "e1071", "evaluate", "expm", "ExtDist", "fansi", "farver", "fastmap", "fontawesome", "fs", "future", "future.apply", "gam", "gargle", "generics", "ggeffects", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gld", "glmnet", "globals", "gower", "gsl", "gtable", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "ISLR2", "isoband", "knitr", "lava", "listenv", "lme4", "maptools", "markdown", "MatrixModels", "matrixStats", "mc2d", "minqa", "nleqslv", "numbers", "openssl", "packrat", "parallelly", "pbkrtest", "pkgbuild", "pkgload", "plyr", "posterior", "processx", "progressr", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rmarkdown", "rstan", "rstatix", "sass", "scales", "shiny", "sourcetools", "sp", "stringi", "svglite", "sys", "testthat", "tibble", "timeDate", "tinytex", "tree", "utf8", "viridisLite", "xfun", "xts", "yaml", "zoo"))
install.packages(c("bayesplot", "BH", "bit", "brms", "Brobdingnag", "bslib", "cachem", "callr", "car", "cli", "colorspace", "colourpicker", "commonmark", "cpp11", "crayon", "curl", "data.table", "DBI", "desc", "DescTools", "deSolve", "digest", "distributional", "dplyr", "DT", "dtwclust", "e1071", "evaluate", "expm", "ExtDist", "fansi", "farver", "fastmap", "fontawesome", "fs", "future", "future.apply", "gam", "gargle", "generics", "ggeffects", "ggpubr", "ggrepel", "ggridges", "ggsignif", "gld", "glmnet", "globals", "gower", "gsl", "gtable", "gtools", "highr", "htmltools", "htmlwidgets", "httpuv", "igraph", "insight", "ISLR2", "isoband", "knitr", "lava", "listenv", "lme4", "maptools", "markdown", "MatrixModels", "matrixStats", "mc2d", "minqa", "nleqslv", "numbers", "openssl", "packrat", "parallelly", "pbkrtest", "pkgbuild", "pkgload", "plyr", "posterior", "processx", "progressr", "ps", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rmarkdown", "rstan", "rstatix", "sass", "scales", "shiny", "sourcetools", "sp", "stringi", "svglite", "sys", "testthat", "tibble", "timeDate", "tinytex", "tree", "utf8", "viridisLite", "xfun", "xts", "yaml", "zoo"))
#Negative Slopes
Neg_Slope_RTB<-(-0.0124)
Neg_Slope_Ref<-(-0.0141)
#Loading temperature for Room Temp Condition.
ST_Condition_DF<-read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#Negative Slopes
Neg_Slope_RTB<-(-0.0124)
Neg_Slope_Ref<-(-0.0141)
#Loading temperature for Room Temp Condition.
ST_Condition_DF<-read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
#Determining room temperature vs refrigeration
ST_Condition_DF$Condition<-ifelse(ST_Condition_DF$Rtemp>10, "Room Temp", "Refrigeration")
##Functions
#Function to get the h (heat transfer coefficient)
get_h<-function(Neg_slope, rho = 1.033, C = 4.2 , V = 0.236, A = 0.004275){
neg_h =  ((Neg_slope*rho*C*V)/A)
return(- neg_h)
}
#Function to get the temperature profile from an external temperature vector
predict_temp_fromProf<-function(Time_Temp_Prof, Initial_Temp,h_condition){
Time_Temp_Profile<-Time_Temp_Prof
Temp_Initial = Initial_Temp
Temp_V<-c()
for (i in 1:length(Time_Temp_Profile)){
T_inf<-Time_Temp_Profile[i]
if (i == 1){
New_Temp = Temp_Initial
}else if (i == 2){
New_Temp = get_temp(h = h_condition, To = Temp_Initial, Tinf =  T_inf, time = 1)
}else{
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
}
Temp_V<-c(Temp_V, New_Temp)
}
return(Temp_V)
}
### getting the h (Heat Transfer Coefficients)
#Room Temperature
h_RTB = get_h(Neg_slope = Neg_Slope_RTB)
#Refrigeration
h_ref = get_h(Neg_slope = Neg_Slope_Ref)
#Generate Temperature Conditions
#Temperatures are a normal distribution
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature)
return (Time_Temp_df)
}
Create_Temperature_Profile_days<-function(First_Cond, Second_Cond,
First_Cond_Total_Time,Second_Cond_Total_Time,
First_Cond_Mean_Temperature, First_Cond_SD_Temperature,
Second_Cond_Mean_Temperature, Second_Cond_SD_Temperature,
Interval, Cycles){
First_Cond_Temps<-Time_Temp_Creation_Var(Total_Time = First_Cond_Total_Time, Interval = Interval ,
Mean_Temperature = First_Cond_Mean_Temperature,
SD_Temperature = First_Cond_SD_Temperature)
Second_Cond_Temps<-Time_Temp_Creation_Var(Total_Time = Second_Cond_Total_Time, Interval = Interval ,
Mean_Temperature = Second_Cond_Mean_Temperature,
SD_Temperature = Second_Cond_SD_Temperature)
First_Cond_Temps_Desc<-rep(First_Cond,length(First_Cond_Temps))
Second_Cond_Temps_Desc<-rep(Second_Cond,length(Second_Cond_Temps))
Temp_Vector<-c()
Cond_Vec<-c()
for (i in 1:Cycles){
Temp_Vector<-c(Temp_Vector,First_Cond_Temps,Second_Cond_Temps)
Cond_Vec<-c(Cond_Vec,First_Cond_Temps_Desc,Second_Cond_Temps_Desc)
}
Simulated_Conditions<-data.frame("Rtemp" = Temp_Vector,
"Condition" = Cond_Vec)
return(Simulated_Conditions)
}
Time_Temp_Df<-Create_Temperature_Profile_days(First_Cond = "Room Temp",
Second_Cond = "Refrigeration",
First_Cond_Total_Time = 124,
Second_Cond_Total_Time = 1194,
First_Cond_Mean_Temperature = 22.1,
First_Cond_SD_Temperature = 0.77,
Second_Cond_Mean_Temperature= 3.71,
Second_Cond_SD_Temperature = 1.04,
Interval  =1,
Cycles = 5)
View(Time_Temp_Df)
Time_Temp_Df<-Create_Temperature_Profile_days(First_Cond = "Room Temp",
Second_Cond = "Refrigeration",
First_Cond_Total_Time = 124,
Second_Cond_Total_Time = 1314,
First_Cond_Mean_Temperature = 22.1,
First_Cond_SD_Temperature = 0.77,
Second_Cond_Mean_Temperature= 3.71,
Second_Cond_SD_Temperature = 1.04,
Interval  =1,
Cycles = 5)
View(Time_Temp_Df)
for (i in 1:length(Time_Temp_Df$Rtemp)){
Current_Cont<-Time_Temp_Df$Condition[i]
Time_Temp_Profile = Time_Temp_Df$Rtemp
print(Current_Cont)
}
for (i in 1:length(Time_Temp_Df$Rtemp)){
Current_Cont<-Time_Temp_Df$Condition[i]
Next_Cont<-Time_Temp_Df$Condition[i+1]
Time_Temp_Profile = Time_Temp_Df$Rtemp
if (Next_Cont != Current_Cont){
print("Change")
}
}
Temp_Milk_Vectors<-c()
Temp_Initial = 4.2
for (i in 1:length(Time_Temp_Df$Rtemp)){
if (i == 1){
New_Temp = Temp_Initial
}
Temp_Milk_Vectors<-c(Temp_Milk_Vectors, New_Temp)
# if (Next_Cont != Current_Cont && i<length(Time_Temp_Df$Rtemp)){
#   Temp_Initial ==
# }
}
print(i)
Temp_Milk_Vectors<-c()
Temp_Initial = 4.2
for (i in 1:length(Time_Temp_Df$Rtemp)){
print(i)
if (i == 1){
New_Temp = Temp_Initial
}
Temp_Milk_Vectors<-c(Temp_Milk_Vectors, New_Temp)
# if (Next_Cont != Current_Cont && i<length(Time_Temp_Df$Rtemp)){
#   Temp_Initial ==
# }
}
Temp_Milk_Vectors<-c()
Temp_Initial = 4.2
Temp_Milk_Vectors<-c(Temp_Initial)
Temp_Milk_Vectors<-c()
Temp_Initial = 4.2
Temp_Milk_Vectors<-c(Temp_Initial)
T_Inf = Time_Temp_Df$Rtemp[1]
for (i in 2:length(Time_Temp_Df$Rtemp)){
#Selecting the condition that applies
if (Time_Temp_Df$Condition[i] == "Room Temp"){
h_condition = h_RTB
} else if (Time_Temp_Df$Condition[i] == "Refrigeration"){
h_condition = h_ref
}
#Checking if condition changed
if(Time_Temp_Df$Condition[i] != Time_Temp_Df$Condition[i-1]){
Condition_Change = 1
T_inf = Time_Temp_Df$Rtemp[i]
} else {
Condition_Change = 0
}
#Predicting the new temperature
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
Temp_Milk_Vectors<-c(Temp_Milk_Vectors,New_Temp)
}
get_h<-function(Neg_slope, rho = 1.033, C = 4.2 , V = 0.236, A = 0.004275){
neg_h =  ((Neg_slope*rho*C*V)/A)
return(- neg_h)
}
#Negative Slopes
Neg_Slope_RTB<-(-0.0124)
Neg_Slope_Ref<-(-0.0141)
#Loading temperature for Room Temp Condition.
ST_Condition_DF<-read.csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
#Determining room temperature vs refrigeration
ST_Condition_DF$Condition<-ifelse(ST_Condition_DF$Rtemp>10, "Room Temp", "Refrigeration")
#Function to get the h (heat transfer coefficient)
get_h<-function(Neg_slope, rho = 1.033, C = 4.2 , V = 0.236, A = 0.004275){
neg_h =  ((Neg_slope*rho*C*V)/A)
return(- neg_h)
}
#Function to get the temperature profile from an external temperature vector
predict_temp_fromProf<-function(Time_Temp_Prof, Initial_Temp,h_condition){
Time_Temp_Profile<-Time_Temp_Prof
Temp_Initial = Initial_Temp
Temp_V<-c()
for (i in 1:length(Time_Temp_Profile)){
T_inf<-Time_Temp_Profile[i]
if (i == 1){
New_Temp = Temp_Initial
}else if (i == 2){
New_Temp = get_temp(h = h_condition, To = Temp_Initial, Tinf =  T_inf, time = 1)
}else{
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
}
Temp_V<-c(Temp_V, New_Temp)
}
return(Temp_V)
}
### getting the h (Heat Transfer Coefficients)
#Room Temperature
h_RTB = get_h(Neg_slope = Neg_Slope_RTB)
#Refrigeration
h_ref = get_h(Neg_slope = Neg_Slope_Ref)
#Generate Temperature Conditions
#Temperatures are a normal distribution
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature)
return (Time_Temp_df)
}
Create_Temperature_Profile_days<-function(First_Cond, Second_Cond,
First_Cond_Total_Time,Second_Cond_Total_Time,
First_Cond_Mean_Temperature, First_Cond_SD_Temperature,
Second_Cond_Mean_Temperature, Second_Cond_SD_Temperature,
Interval, Cycles){
First_Cond_Temps<-Time_Temp_Creation_Var(Total_Time = First_Cond_Total_Time, Interval = Interval ,
Mean_Temperature = First_Cond_Mean_Temperature,
SD_Temperature = First_Cond_SD_Temperature)
Second_Cond_Temps<-Time_Temp_Creation_Var(Total_Time = Second_Cond_Total_Time, Interval = Interval ,
Mean_Temperature = Second_Cond_Mean_Temperature,
SD_Temperature = Second_Cond_SD_Temperature)
First_Cond_Temps_Desc<-rep(First_Cond,length(First_Cond_Temps))
Second_Cond_Temps_Desc<-rep(Second_Cond,length(Second_Cond_Temps))
Temp_Vector<-c()
Cond_Vec<-c()
for (i in 1:Cycles){
Temp_Vector<-c(Temp_Vector,First_Cond_Temps,Second_Cond_Temps)
Cond_Vec<-c(Cond_Vec,First_Cond_Temps_Desc,Second_Cond_Temps_Desc)
}
Simulated_Conditions<-data.frame("Rtemp" = Temp_Vector,
"Condition" = Cond_Vec)
return(Simulated_Conditions)
}
Time_Temp_Df<-Create_Temperature_Profile_days(First_Cond = "Room Temp",
Second_Cond = "Refrigeration",
First_Cond_Total_Time = 124,
Second_Cond_Total_Time = 1314,
First_Cond_Mean_Temperature = 22.1,
First_Cond_SD_Temperature = 0.77,
Second_Cond_Mean_Temperature= 3.71,
Second_Cond_SD_Temperature = 1.04,
Interval  =1,
Cycles = 5)
Temp_Milk_Vectors<-c()
Temp_Initial = 4.2
Temp_Milk_Vectors<-c(Temp_Initial)
T_Inf = Time_Temp_Df$Rtemp[1]
for (i in 2:length(Time_Temp_Df$Rtemp)){
#Selecting the condition that applies
if (Time_Temp_Df$Condition[i] == "Room Temp"){
h_condition = h_RTB
} else if (Time_Temp_Df$Condition[i] == "Refrigeration"){
h_condition = h_ref
}
#Checking if condition changed
if(Time_Temp_Df$Condition[i] != Time_Temp_Df$Condition[i-1]){
Condition_Change = 1
T_inf = Time_Temp_Df$Rtemp[i]
} else {
Condition_Change = 0
}
plot(Temp_Milk_Vectors)
Temp_Milk_Vectors<-c()
Temp_Initial = 4.2
Temp_Milk_Vectors<-c(Temp_Initial)
T_Inf = Time_Temp_Df$Rtemp[1]
for (i in 2:length(Time_Temp_Df$Rtemp)){
#Selecting the condition that applies
if (Time_Temp_Df$Condition[i] == "Room Temp"){
h_condition = h_RTB
} else if (Time_Temp_Df$Condition[i] == "Refrigeration"){
h_condition = h_ref
}
#Checking if condition changed
if(Time_Temp_Df$Condition[i] != Time_Temp_Df$Condition[i-1]){
Condition_Change = 1
T_inf = Time_Temp_Df$Rtemp[i]
} else {
Condition_Change = 0
}
#Predicting the new temperature
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
Temp_Milk_Vectors<-c(Temp_Milk_Vectors,New_Temp)
}
get_temp<-function(h, To, Tinf, time,  A =0.004275,rho =1.033, C= 4.2, V = 0.236 ){
#Time in minutes
#Tinf = External Temp
#To = Initial temperature of the milk
# h = convection trans coeff for that codition
return (exp(-(h*A/rho*C*V)*(time))*(To-Tinf)+Tinf)
}
Temp_Milk_Vectors<-c()
Temp_Initial = 4.2
Temp_Milk_Vectors<-c(Temp_Initial)
T_Inf = Time_Temp_Df$Rtemp[1]
for (i in 2:length(Time_Temp_Df$Rtemp)){
#Selecting the condition that applies
if (Time_Temp_Df$Condition[i] == "Room Temp"){
h_condition = h_RTB
} else if (Time_Temp_Df$Condition[i] == "Refrigeration"){
h_condition = h_ref
}
#Checking if condition changed
if(Time_Temp_Df$Condition[i] != Time_Temp_Df$Condition[i-1]){
Condition_Change = 1
T_inf = Time_Temp_Df$Rtemp[i]
} else {
Condition_Change = 0
}
#Predicting the new temperature
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
Temp_Milk_Vectors<-c(Temp_Milk_Vectors,New_Temp)
}
Temp_Milk_Vectors<-c()
Temp_Initial = 4.2
Temp_Milk_Vectors<-c(Temp_Initial)
T_inf = Time_Temp_Df$Rtemp[1]
for (i in 2:length(Time_Temp_Df$Rtemp)){
#Selecting the condition that applies
if (Time_Temp_Df$Condition[i] == "Room Temp"){
h_condition = h_RTB
} else if (Time_Temp_Df$Condition[i] == "Refrigeration"){
h_condition = h_ref
}
#Checking if condition changed
if(Time_Temp_Df$Condition[i] != Time_Temp_Df$Condition[i-1]){
Condition_Change = 1
T_inf = Time_Temp_Df$Rtemp[i]
} else {
Condition_Change = 0
}
#Predicting the new temperature
New_Temp = get_temp(h = h_condition, To = New_Temp, Tinf =  T_inf, time = 1)
Temp_Milk_Vectors<-c(Temp_Milk_Vectors,New_Temp)
}
plot(Temp_Milk_Vectors)
lineplot(Temp_Milk_Vectors)
plot(Temp_Milk_Vectors, type = "b")
plot(Temp_Milk_Vectors, type = "S")
plot(Temp_Milk_Vectors, type = "S")
plot(Time_Temp_Df$Rtemp)
plot(Temp_Milk_Vectors, type = "S")
plot(Time_Temp_Df$Rtemp)
plot(Time_Temp_Df$Rtemp, type = "S")
plot(Temp_Milk_Vectors, type = "S")
plot(Time_Temp_Df$Rtemp, type = "S")
lines(Time_Temp_Df$Rtemp, type = "S")
plot(Temp_Milk_Vectors, type = "S")
lines(Time_Temp_Df$Rtemp, type = "S")
plot(Temp_Milk_Vectors, type = "S", col = "red")
lines(Time_Temp_Df$Rtemp, type = "S", col = "blue")
plot(Temp_Milk_Vectors, type = "S", col = "red")
