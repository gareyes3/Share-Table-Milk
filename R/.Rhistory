source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
AnalysysDF
View(AnalysysDF)
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
#Inputs and Source Files-------------------------------------
#Inputs
source("Main_Loop.R")
source("Input_Static.R")
source("Input_Functions.R")
source("Util_DFFunctions.R")
source("Util_DFWeekCreation.R")
source("Util_Counter&Lists.R")
#Functions
source("Util_Functions.R")
source("Util_CCFunctions2.R")
source("Util_VisualFunctions.R")
source("Util_Output_Functions.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#SummaryLisr = List_Sens_Fr
#FoodType= = "Fruit"
#1. Start from here
Individual_Analysis_Fr<-rbind.fill(List_Sens_Pre)
#2. find the dupplicates
#this step filters replicated based on the ID
Individual_Analysis_Fr<-Individual_Analysis_Fr %>%
group_by(ID) %>%
filter(TotServices==max(TotServices))
#3
AnalysysDF<-Individual_Analysis_Fr
View(AnalysysDF)
library(scales)
library(forcats)
AnalysysDF %>%
count(Location) %>%
arrange(desc(n)) %>%
mutate(Location = fct_reorder(Location, n)) %>%
ggplot(aes(x =Location, y = n/sum(n)*100))+
scale_y_continuous(labels = scales::percent_format(scale = 1) )+
geom_col()+
labs(x = "Final Food Location", y = "Percent of milk items by location", title= "Final Location for milk-Donation happens end of week")+
theme(plot.title = element_text(hjust = 0.5))+
coord_flip()
AnalysysDF %>%
ggplot(aes(x = TotTime))+
geom_histogram()+
scale_x_continuous(n.breaks= 10)+
labs(x = "Time in Hours", y = "Count ", title= "Time in system by Item week")+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
ggplot()+
geom_histogram(aes(x = SpoilageCon),color="darkblue", fill="lightblue",alpha= 0.3)+
geom_histogram(aes(x = InSpoilageCon),color="darkblue", fill="lightgreen", alpha= 0.3)+
geom_vline(xintercept =7, color= "Red")+
scale_x_continuous(n.breaks= 10)+
labs(x = "Phsychotroph Population Log CFU/ml", y = "Count", title= "Levels per milk carton")+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
group_by(ConsumedAt) %>%
summarise(ChangeCon = SpoilageCon-InSpoilageCon) %>%
filter(ConsumedAt!="") %>%
ggplot(aes(x = ChangeCon, fill = ConsumedAt))+
geom_histogram(bins=50)+
labs(x = "Change in population log CFU/ml")
AnalysysDF %>%
ggplot(aes(y = SpoilageCon, x= TotTime, color = ConsumedAt))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location, scales = "free_x")+
labs(x = "Log Time in System (hrs)", y = "Phsychotroph Population Log CFU/ml", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous()+
scale_x_log10(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
ggplot(aes(y = SpoilageCon, x= TotTime, color = ConsumedAt))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location, scales = "free_x")+
labs(x = "Log Time in System (hrs)", y = "Phsychotroph Population Log CFU/ml", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous()+
#scale_x_log10(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
AnalysysDF %>%
ggplot(aes(y = SpoilageCon, x= TotTime, color = ConsumedAt))+
geom_point( size =2, fill = "skyblue", shape = 21, alpha = 0.7, fill = "blue")+
geom_hline(yintercept =7, color= "Red")+
facet_wrap(.~Location)+
labs(x = "Log Time in System (hrs)", y = "Phsychotroph Population Log CFU/ml", title= "Psychotrophic Population vs total time in system, milk Items- Week")+
scale_y_continuous()+
# scale_x_log10(n.breaks= 10)+
theme(plot.title = element_text(hjust = 0.5))
library(tidyverse)
library(ExtDist)
library(jmuOutlier)
library(truncnorm)
library(reshape2)
#Function for growth and lag phase
new_growth_rate<-function(newTemp, oldMu,oldTemp = 6, T0 = -4.15){
newMu<-((newTemp-T0)/(oldTemp-T0))* oldMu
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 6, T0 = -4.15) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
#Automatic Time + Change function
look_for_st<-function(df = SpeciesDF,st, par_of_int){
if (par_of_int == "lagt"){
x<-df %>%
filter(ST == st) %>%
pull(lag_h)
} else if (par_of_int == "mumax"){
x<-df %>%
filter(ST == st) %>%
pull(mumax)
} else if (par_of_int == "Nmax"){
x<-df %>%
filter(ST == st) %>%
pull(Nmax)
} else if (par_of_int == "GModel"){
x<-df %>%
filter(ST == st) %>%
pull(GModel)
}else {
stop(paste0(par_of_int, " is not a valid parameter name. Must be one of lagt, mumax, Nmax"))
}
return(x)
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk.
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,ST_Iter,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#ST_Iter = The ST that corresponds to this milk carton
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed<-In_Lag_Consumed
Total_Growth  <- 0
old_lag = look_for_st(st= ST_Iter, par_of_int = "lagt")
old_mumax = look_for_st(st= ST_Iter, par_of_int = "mumax")
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$means[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$means[i], oldMu = old_mumax))/2.303)*0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
}
return(c(Total_Growth,Total_Lag_Consumed))
}
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"means"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
#Species df in the main fil
SpeciesDF<-read_csv("SpeciesData.csv")
#Prevalences for paper, used to fill out which STs are most common among milks
Prevs<-c(8.93,0.65,1.53,0.87,8.93,0.22,1.31,1.31,0.22,0.22,2.18,2.18)
Prevs<-Prevs/sum(Prevs)
SpeciesDF$Prev<-Prevs
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#DO NOT USE:  this function is trying to make a better version that can be used with apply. Still working on it.
Spoilage_Function_Apply<-function(Milkdf,Time_Temp_df){
In_Lag_Consumed<-Milkdf[3] #Lag Con
ST_Iter<-Milkdf[4] #Species
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax")
Interval <- 1/60
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
Milkdf[3]<-Output_Milk[2]
Milkdf[2]<-Output_Milk[1]+Milkdf[2]
if(Milkdf[2]>Pop_Max){
Milkdf[2]<-Pop_Max
}
return(Milkdf)
}
Temperature_Static<- rlaplace(1,m=4.06,s=2.31)
while (Temperature_Static > 15 | Temperature_Static < -1) {
Temperature_Static<- rlaplace(1,m=4.06,s=2.31)
}
Time_Temp_df<-data.frame("min"= seq(1,1060*5))
Time_Temp_df$means = 4.06
Milkdf<-data.frame("MilkID" = seq(0,100),"SpoilageCon" =NA, "LagCon" = 0, "Species" = NA)
Milkdf$Species<-9#sample(SpeciesDF$ST,size = length(Milkdf$Species), prob = SpeciesDF$Prev, replace = T)
Milkdf$SpoilageCon<-2.1#rtruncnorm(n = length(Milkdf$SpoilageCon),b = 3, mean =0.3817872, sd=1.108859)
Milkdf$SpoilageConIn<-Milkdf$SpoilageCon
mean(Milkdf$SpoilageConIn)
N_Days = 1
for (i in 1:N_Days){
Milkdf<-Spoilage_Function(Milkdf,Time_Temp_df)
}
mean(Milkdf$SpoilageCon)
hist(Milkdf$SpoilageCon)
Milkdf<-data.frame("MilkID" = seq(0,1000),"SpoilageCon" =NA, "LagCon" = 0, "Species" = NA)
Milkdf$Species<-sample(SpeciesDF$ST,size = length(Milkdf$Species), prob = SpeciesDF$Prev, replace = T)
Milkdf$SpoilageCon<-rtruncnorm(n = length(Milkdf$SpoilageCon),b = 3, mean =0.3817872, sd=1.108859)
Milkdf$SpoilageConIn<-Milkdf$SpoilageCon
mean(Milkdf$SpoilageCon)
Midfbu<-Milkdf
OvernightSto_C %>%
ggplot(aes(x = min, y = means))+
geom_point()
library(tidyverse)
library(ExtDist)
library(jmuOutlier)
library(truncnorm)
library(reshape2)
#Function for growth and lag phase
new_growth_rate<-function(newTemp, oldMu,oldTemp = 6, T0 = -4.15){
newMu<-((newTemp-T0)/(oldTemp-T0))* oldMu
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 6, T0 = -4.15) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"= rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)*0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
}
return(c(Total_Growth,Total_Lag_Consumed))
}
#Buchanan spoilage function
Spoilage_Function<-function(Milkdf,Time_Temp_df){
for(i in 1:nrow(Milkdf)){
In_Lag_Consumed<-Milkdf$LagCon[i] #selecting lag for specific milk
ST_Iter<-Milkdf$Species[i] #selecting the ST of interest
Pop_Max<-look_for_st(st= ST_Iter,par_of_int = "Nmax") #Population max for given ST
Interval <- 1/60 #Interval in hours. means 0.01666 hours. maybe need is an input?
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = In_Lag_Consumed ,Time_Temp_df = Time_Temp_df,ST_Iter = ST_Iter,Interval = Interval)
#updating the total lag consumed
Milkdf$LagCon[i]<-Output_Milk[2]
#Updating the spoilage contamination of milk
Milkdf$SpoilageCon[i]<-Output_Milk[1]+Milkdf$SpoilageCon[i]
#Updating, that is Pop max is reached, then the current population is at population max.
if(Milkdf$SpoilageCon[i]>Pop_Max){
Milkdf$SpoilageCon[i]<-Pop_Max
}
}
#Returns the updated milk data frame
return(Milkdf)
}
#Buchanan spoilage function
Spoilage_Function_Single_Milk<-function(Cont, Pop_Max, Time_Temp_df, Interval =1/60){
Lag_Consumed = 0
#this function provides two outputs, the total growth, and the new updated lag phase consumed.
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = Lag_Consumed ,Time_Temp_df = Time_Temp_df,Interval = Interval)
Lag_Consumed = Output_Milk[2]
Cont<-Output_Milk[1]+Cont
if( Cont>Pop_Max){
Cont = Pop_Max
}
return (Cont)
}
Time_Temp_Df<-Time_Temp_Creation_Var(Total_Time = 96*60, Interval = 1,Mean_Temperature = 4.36,SD_Temperature = 0.1591)
Spoilage_Function_Single_Milk(Cont = 2.44, Pop_Max =8.14, Time_Temp_df = Time_Temp_Df, Interval =1/60)
Dec_Day1<-read.csv("Dec_Day1_Temps.csv")
Func_Growth_LagCon(In_Lag_Consumed =0, Time_Temp_df= Dec_Day1,Interval =1/60)
Time_Temp_Profile<-read_csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
Time_Temp_Profile
#Function for growth and lag phase
new_growth_rate<-function(newTemp, oldMu,oldTemp = 6, T0 = -4.15){
newMu<-((newTemp-T0)/(oldTemp-T0))* oldMu
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 6, T0 = -4.15) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"= rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)* 1.3209#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = 0 ,Time_Temp_df = Time_Temp_Profile,Interval = 1/60)
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)* 1.3209#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = 0 ,Time_Temp_df = Time_Temp_Profile,Interval = 1/60)
Time_Temp_Profile<-read_csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
Time_Temp_Profile
Time_Temp_Profile<-read_csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = 0 ,Time_Temp_df = Time_Temp_Profile,Interval = 1/60)
Output_Milk
Output_Milk[[3]]
Changes_Over_Time<-Output_Milk[[3]]
#Setting Working Directory-------------------------------------
#setwd("C:/Users/gareyes3/Documents/GitHub/Share-Table-Milk/R")
#setwd("G:/Share Table QMRA/Share-Table-QMRA/R")
#setwd(getSrcDirectory()[1])
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) #Set working directory to the path of document
#Opening Libary and Inputs-------------------------------------
source("Util_Library.R")
source("Functions_Full_Analysis.R")
Time_Temp_Profile<-read_csv("5Days-Adjusted-Temp-2hr-Cycles.csv")
#Function for growth and lag phase
new_growth_rate<-function(newTemp, oldMu,oldTemp = 6, T0 = -4.15){
newMu<-((newTemp-T0)/(oldTemp-T0))* oldMu
return (newMu)
}
#Calculation of the new lag time.
new_lag_time <- function (newTemp, oldLag, oldTemp = 6, T0 = -4.15) {
numerator <- oldTemp -T0
denom <- newTemp - T0
newLag <- ( (numerator / denom)^2) * oldLag
return(newLag)
}
#Not in use, function to create a data frame based on interval and initial and final temperature
Time_Temp_Creation<-function(Total_Time, Interval, Initial_Temperature, Final_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"  = seq(Initial_Temperature,Final_Temperature, by = ((Final_Temperature - Initial_Temperature)/(length(seq(0,Total_Time,by = Interval)) - 1) )))
}
Time_Temp_Creation_Var<-function(Total_Time, Interval, Mean_Temperature, SD_Temperature){
Time_Temp_df<-data.frame("min"= seq(0,Total_Time,by = Interval),
"tempM"= rnorm(n =Total_Time+1, mean = Mean_Temperature, sd= SD_Temperature))
return (Time_Temp_df)
}
#This function calculates thee growth based on a time and temperature profile for 1 specific milk with R100084 P Paoae
Func_Growth_LagCon<-function(In_Lag_Consumed, Time_Temp_df,Interval){
#In_Lag_Consumed= Total lag time consumed
#Time_Temp_df = dataframe with time and temperature conditions
#Interval = time interval in the time_temp_df in hrs.
Total_Lag_Consumed = In_Lag_Consumed
Total_Growth = 0
old_lag = 0
NMax = 8.14
old_mumax = 0.083508
Growth_V = c()
for (i in 1:nrow(Time_Temp_df)){
if (Total_Lag_Consumed <1 && old_lag!=0){
Lag_t_interval<-new_lag_time(newTemp = Time_Temp_df$tempM[i], oldLag = old_lag)
Lag_Consumed<-Interval/Lag_t_interval
Total_Lag_Consumed<-Total_Lag_Consumed+Lag_Consumed
Growth = 0
} else if (Total_Lag_Consumed>=1 | old_lag == 0){
Growth = ((new_growth_rate(newTemp = Time_Temp_df$tempM[i], oldMu = old_mumax))/2.303)* 1.3209#0.684 #Converted log10 from log ln
Total_Growth = Total_Growth + (Growth*Interval)
}
Growth_V = c(Growth_V,Total_Growth)
#print(length(Growth_V))
}
return(list(Total_Growth,Total_Lag_Consumed,Growth_V))
}
Output_Milk<-Func_Growth_LagCon(In_Lag_Consumed = 0 ,Time_Temp_df = Time_Temp_Profile,Interval = 1/60)
Changes_Over_Time<-Output_Milk[[3]]
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
#Running Loop First:-------------------------------------
start_time<-Sys.time()
source("Main_Loops2.R")
